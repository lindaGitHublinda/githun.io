<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaelinda</title>
  <subtitle>hexo_subtitle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaelblog.website/"/>
  <updated>2017-09-21T01:56:44.000Z</updated>
  <id>http://kaelblog.website/</id>
  
  <author>
    <name>Kael</name>
    <email>zhouzuosong_kael@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-Naitve ES6标准中模块的导入导出</title>
    <link href="http://kaelblog.website/2017/09/21/React-Naitve-ES6%E6%A0%87%E5%87%86%E4%B8%AD%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>http://kaelblog.website/2017/09/21/React-Naitve-ES6标准中模块的导入导出/</id>
    <published>2017-09-21T01:38:56.000Z</published>
    <updated>2017-09-21T01:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><a href="http://lib.csdn.net/article/reactnative/43547" target="_blank" rel="external">原文参考</a></p>
<hr>
<h2 id="导出-export"><a href="#导出-export" class="headerlink" title="导出 export"></a>导出 <code>export</code></h2><ul>
<li><p>默认导出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export default Calss Foo Extend Componente&#123;</div><div class="line">  render()&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export default foo;</div></pre></td></tr></table></figure>
<p>默认导出时更名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export &#123;foo as default&#125;;</div></pre></td></tr></table></figure>
<p>总结：</p>
<p>> 默认导出在一个类中只能有一个！！ 只能有一个！ 只能有一个！ 只能有一个！ 重要的事情说三遍！ 如果还想导出其他模块，那就用<code>常规导出</code></p>
</li>
<li><p>常规导出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">// ...</div><div class="line">&#125;</div><div class="line">var awesome = 42;</div><div class="line">var bar = [1,2,3];</div><div class="line">export &#123; foo, awesome, bar &#125;;</div><div class="line">//导出方法、变量、类模块</div></pre></td></tr></table></figure>
<p>导出时重命名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function foo() &#123; .. &#125;</div><div class="line">export &#123; foo as bar &#125;;</div></pre></td></tr></table></figure>
<p>混合默认导出和常规导出,中间用<strong>‘,’</strong>隔开：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function foo() &#123; .. &#125;</div><div class="line">function bar() &#123; .. &#125;</div><div class="line">function baz() &#123; .. &#125;</div><div class="line">export &#123; foo as default, bar, baz, .. &#125;;</div></pre></td></tr></table></figure>
<p>从其他模块导出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export &#123; foo, bar &#125; from &quot;baz&quot;;</div><div class="line">export &#123; foo as FOO, bar as BAR &#125; from &quot;baz&quot;;</div><div class="line">export * from &quot;baz&quot;;</div></pre></td></tr></table></figure>
<p>## 导入 import</p>
<ul>
<li><p>默认导入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo from &quot;foo&quot;;</div></pre></td></tr></table></figure>
<p><strong>这种导入方式是跟 <code>export default *</code> 相呼应的</strong></p>
</li>
<li><p>常规导入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import foo from &quot;foo&quot;; // or:</div><div class="line">import &#123; foo &#125; from &quot;foo&quot;;//or:</div><div class="line">import &#123; default as foo &#125; from &quot;foo&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>改名导入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123; foo as theFooFunc &#125; from &quot;foo&quot;;</div></pre></td></tr></table></figure>
<p>另：import 有一个<code>变量提前</code>的过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line">import &#123; foo &#125; from &quot;foo&quot;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://lib.csdn.net/article/reactnative/43547&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文参考&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;导出-export&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="React" scheme="http://kaelblog.website/tags/React/"/>
    
      <category term="React-Naitve" scheme="http://kaelblog.website/tags/React-Naitve/"/>
    
  </entry>
  
  <entry>
    <title>rect-navigation Android headerTitle 居中适配方案</title>
    <link href="http://kaelblog.website/2017/09/01/rect-navigation-Android-headerTitle-%E5%B1%85%E4%B8%AD%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://kaelblog.website/2017/09/01/rect-navigation-Android-headerTitle-居中适配方案/</id>
    <published>2017-09-01T02:12:55.000Z</published>
    <updated>2017-09-01T02:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方案一-修改源码"><a href="#方案一-修改源码" class="headerlink" title="方案一 : 修改源码"></a>方案一 : 修改源码</h2><p>  <a href="http://www.jianshu.com/p/d50bcde46df3?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">参考这里</a></p>
<ul>
<li><p>【node_modules – react-navigation – src – views – Header.js】的326行代码处，修改为如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: &#123;</div><div class="line">bottom: 0,</div><div class="line">left: TITLE_OFFSET,</div><div class="line">right: TITLE_OFFSET,</div><div class="line">top: 0,</div><div class="line">position: &apos;absolute&apos;,</div><div class="line">alignItems: &apos;center&apos;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注释掉170行的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// if (Platform.OS === &apos;android&apos;) &#123;</div><div class="line">//   if (!options.hasLeftComponent) &#123;</div><div class="line">//     style.left = 0;</div><div class="line">//   &#125;</div><div class="line">//   if (!options.hasRightComponent) &#123;</div><div class="line">//     style.right = 0;</div><div class="line">//   &#125;</div><div class="line">// &#125; &#125;</div></pre></td></tr></table></figure>
<h2 id="方案二-使用代码中适配"><a href="#方案二-使用代码中适配" class="headerlink" title="方案二 : 使用代码中适配"></a>方案二 : 使用代码中适配</h2></li>
<li><p>case 1:导航栏只有标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">headerTitleStyle:&#123;</div><div class="line"> alignSelf: &apos;center&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>case 2:导航栏左侧有headerLeft</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">headerTitleStyle:(Platform.OS === &apos;android’)?&#123;</div><div class="line">  marginRight:72,</div><div class="line">  alignSelf: &apos;center’,&#125;:&#123;//这里是iOS的样式&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>case 3:导航栏右侧有headerRight</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">headerTitleStyle:(Platform.OS === &apos;android’)?&#123;</div><div class="line">  marginLeft:72,</div><div class="line">  alignSelf: &apos;center’,&#125;:&#123;//这里是iOS的样式&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>case 4:导航栏左右都有 headerLeft headerRight <em>同 case 1</em></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方案一-修改源码&quot;&gt;&lt;a href=&quot;#方案一-修改源码&quot; class=&quot;headerlink&quot; title=&quot;方案一 : 修改源码&quot;&gt;&lt;/a&gt;方案一 : 修改源码&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;http://www.jianshu.com/p/d50bcd
    
    </summary>
    
    
      <category term="react-native" scheme="http://kaelblog.website/tags/react-native/"/>
    
      <category term="编程" scheme="http://kaelblog.website/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>reactnative 快速集成 Redux</title>
    <link href="http://kaelblog.website/2017/08/11/reactnative-%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90-Redux/"/>
    <id>http://kaelblog.website/2017/08/11/reactnative-快速集成-Redux/</id>
    <published>2017-08-11T06:36:53.000Z</published>
    <updated>2017-08-11T08:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native-集成-Redux"><a href="#React-Native-集成-Redux" class="headerlink" title="React Native 集成 Redux"></a>React Native 集成 Redux</h1><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><ul>
<li>Flux/reFlux/Redux</li>
<li>简单/单一状态树</li>
<li>react 和 redux 数据流的关系</li>
<li>JS、CSS、HTML</li>
<li>JSX</li>
<li>webpack 构建</li>
</ul>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><ul>
<li>MVC 状态复杂之后，action会触发事件 并且不可预测</li>
<li>flux: state Tree will send data to view,but view can’t send data to state-tree.</li>
<li>Redux :  state 是包含在store中的</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install react</div><div class="line">npm install redux react-redux --save</div></pre></td></tr></table></figure>
<h2 id="快速开始（速成版本）："><a href="#快速开始（速成版本）：" class="headerlink" title="快速开始（速成版本）："></a>快速开始（速成版本）：</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li><code>action</code> : React行为/变化的描述 是一个对象</li>
<li><code>dispatch</code> : 派发用户行为的一个方法 <code>store</code>的一个属性</li>
<li><code>reducer</code> : 接收<code>action</code>,并进行简单的拼接，其内部是<code>纯函数</code>（到底什么是纯函数请移步百度 ： <a href="https://www.baidu.com/s?wd=%E7%BA%AF%E5%87%BD%E6%95%B0" target="_blank" rel="external">传送门</a> 、 <a href="http://blog.csdn.net/hongweigg/article/details/44035283" target="_blank" rel="external">速达传送门</a>）</li>
<li><code>store</code> :存储数据的地方</li>
</ul>
<h3 id="Get-start"><a href="#Get-start" class="headerlink" title="Get start:"></a>Get start:</h3><ul>
<li><p>step1 : <strong>安装依赖</strong> </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redux react-redux --save</div></pre></td></tr></table></figure>
</li>
<li><p>step2 : 创建一个 AppProvider.js 并导出AppProvider组件 ：  <strong>AppProvider 作为APP的入口组件</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export default AppProvider;</div></pre></td></tr></table></figure>
</li>
<li><p>step3 : AppProvider.js 中导入头文件    </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;    </div><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>step4 : 准备AppProvider的包装数据：</p>
<ul>
<li><p>创建全局的store用于存储状态,并绑定<strong>reducer</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const store = createStore(AppReducer)</div></pre></td></tr></table></figure>
</li>
<li><p>包装APPProvider：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const AppProvider = () =&gt; &#123;</div><div class="line">    return (</div><div class="line">      //KR-1 包裹一层Provider   之后进入被包裹控件内部 进行关联处理</div><div class="line">        &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">            &lt;RootStack /&gt;</div><div class="line">        &lt;/Provider&gt;</div><div class="line">    )</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>index.ios.js 文件中注册下 AppProvider对象</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(&apos;XinLiFM&apos;, () =&gt; AppProvider);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>step5 : <strong>数据绑定</strong> 找到打算有 数据流传递 的对象 AppFind</p>
<ul>
<li><p>导入头文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>绑定数据：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//用来获取更新后的数据   监听数据更新</div><div class="line">const mapStateToProps = (state,ownProps) =&gt; &#123;</div><div class="line">    console.log(state);</div><div class="line">    return &#123;</div><div class="line">        testShow: state.find.testShow,</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//用来派发消息</div><div class="line">const mapDispatchToProps = (dispatch,ownProps) =&gt; (&#123;</div><div class="line">  changeTabBar: (...args) =&gt; dispatch(showTabBar(...args)),</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//用来进行数据流  和  控件的绑定关系</div><div class="line">export default connect(mapStateToProps,mapDispatchToProps)(AppFind)</div></pre></td></tr></table></figure>
</li>
<li><p>派发消息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.props.changeTabBar(!this.props.testShow)</div></pre></td></tr></table></figure>
</li>
<li><p>消息处理：step4 中绑定的reducer文件中:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//1.导入头文件</div><div class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</div><div class="line">//2.创建初始化状态</div><div class="line">const initialState = &#123; testShow: true&#125;;</div><div class="line">//3.逻辑处理</div><div class="line">const find = (state = initialState, action) =&gt; &#123;</div><div class="line">      switch (action.type) &#123;</div><div class="line">          case &apos;findshowTabBar&apos;:&#123;</div><div class="line">		    return Object.assign(&#123;&#125;, state, &#123;</div><div class="line">			   testShow: action.testShow</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line">	   default:</div><div class="line">		return state;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  //4.组合所有的逻辑块</div><div class="line">  const AppReducer = combineReducers(&#123;</div><div class="line">      find, </div><div class="line">      //如果业务繁多这里可能还有别的模块</div><div class="line">  &#125;);</div><div class="line">  //5.导出</div><div class="line">  export default AppReducer;</div></pre></td></tr></table></figure>
</li>
<li><p>获取更改状态值：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//因为上一步的绑定数据  就是将state的状态值 绑定到AppFind的props上，</div><div class="line">//所以取值的时候直接从this。props中取即可</div><div class="line">var &#123;testShow,isShowTab,showTabBar&#125; = this.props;</div><div class="line">&lt;Text </div><div class="line">    style=&#123;&#123;fontSize:17,color:testShow?&quot;red&quot;:&apos;rgb(39, 249, 110)&apos;&#125;&#125;&gt;</div><div class="line">    &#123;testShow?&quot;我要显示某个东西&quot;:&quot;我要隐藏某个东西&quot;&#125;</div><div class="line">&lt;/Text&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>总结：<br>其实这里最重要的就三步：1. 包装   2、数据绑定 3、数据处理</p>
</blockquote>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="1-action"><a href="#1-action" class="headerlink" title="1. action"></a>1. action</h3><p>信息的携带者。<br><strong>派发消息的几种方式：</strong></p>
<ul>
<li>直接发送：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch(&#123;type:&apos;action_name&apos;,index:2&#125;);</div><div class="line"></div><div class="line">const myAction = &#123;</div><div class="line">  type:&apos;action_name&apos;,</div><div class="line">  index: 1,</div><div class="line">&#125;</div><div class="line">dispatch(myAction);</div></pre></td></tr></table></figure>
<ul>
<li>通过Action的创建函数发送：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//我们可以把所有的Action封装到一个固定文件 就想CSS文件那样 头文件导入的方式 去引用</div><div class="line">const actionFunc = (text) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    type: &apos;action_name&apos;,</div><div class="line">    index: 2,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//派发消息时候 直接引用创建函数的返回结果即可</div><div class="line">dispatch(actionFunc(&apos;test&apos;));</div></pre></td></tr></table></figure>
<ul>
<li>绑定的Action创建函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//基本action创建函数</div><div class="line">const actionFunc = (text) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    type: &apos;action_name&apos;,</div><div class="line">    index: 2,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//绑定派发方法</div><div class="line">const boundAction = (test) =&gt; &#123;</div><div class="line">  dispatch(actionFunc(test));</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用绑定好的派发函数</div><div class="line">boundAction(&apos;test&apos;);</div></pre></td></tr></table></figure>
<h3 id="2-reducer"><a href="#2-reducer" class="headerlink" title="2. reducer"></a>2. reducer</h3><p>纯函数；</p>
<ul>
<li><p>方法结构</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(previouseState,action) =&gt; newState</div></pre></td></tr></table></figure>
<p>  给一个旧的state 和一个action 生成 一个新的 state。</p>
</li>
<li><p>基本方法</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const initialState = &#123; testShow: true&#125;;</div><div class="line"></div><div class="line">const home = (state = initialState, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case &apos;homeshowTabBar&apos;:&#123;</div><div class="line"></div><div class="line">      console.log(&quot;homeshowTabBar：%s&quot;,action.testShow);</div><div class="line">        </div><div class="line">    //合并状态值</div><div class="line">      return Object.assign(&#123;&#125;, state, &#123;</div><div class="line">        testShow: action.testShow;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    default:</div><div class="line">    return state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>合并state的时候下面的方法也是能达到相同效果的</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;...state, ...newState&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>拆分合并reducer</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const home = (state = initialState, action) =&gt; &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case &apos;homeshowTabBar&apos;:&#123;</div><div class="line">            console.log(&quot;homeshowTabBar：%s&quot;,action.testShow);</div><div class="line">            return Object.assign(&#123;&#125;, state, &#123;</div><div class="line">                testShow: action.testShow</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        default:</div><div class="line">        return state;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const find = (state = initialState, action) =&gt; &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case &apos;findshowTabBar&apos;:&#123;</div><div class="line">            return Object.assign(&#123;&#125;, state, &#123;</div><div class="line">            testShow: action.testShow</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        default:</div><div class="line">        return state;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">//合并</div><div class="line">const AppReducer = combineReducers(&#123;</div><div class="line">    nav,</div><div class="line">    home,</div><div class="line">    find,</div><div class="line">&#125;);</div><div class="line">export default AppReducer</div></pre></td></tr></table></figure>
<p>  <strong>注意上面的写法和下面完全等价!!!</strong>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const AppReducer = (state=&#123;&#125;, action) =&gt; &#123;</div><div class="line">    return &#123;</div><div class="line">        home: home(state.home,action),</div><div class="line">        find: find(sate.find,action),</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>减少代码量 自动定义 reducerCreator</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">export const testCreator = myCreatorForReducer([], &#123;</div><div class="line"> [ActionTypes.ADD_TODO](state, action) &#123;</div><div class="line"> let text = action.text.trim();</div><div class="line"> return [...state, text];</div><div class="line"> &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">const myCreatorForReducer = (initialState,handles) =&gt; &#123;</div><div class="line"></div><div class="line">    return (state=initialState,action) =&gt; &#123;</div><div class="line">        return handles[action.type](state,action);</div><div class="line">    &#125;else &#123;</div><div class="line">     return state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  设置不同的Key、调用不同的方法:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const reducer = combineReducers(&#123;</div><div class="line">    a: doSomethingWithA,</div><div class="line">    b: processB,</div><div class="line">    c: c</div><div class="line">&#125;)</div><div class="line">    </div><div class="line">function reducer(state = &#123;&#125;, action) &#123;</div><div class="line">    return &#123;</div><div class="line">        a: doSomethingWithA(state.a, action),</div><div class="line">        b: processB(state.b, action),</div><div class="line">        c: c(state.c, action)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-store"><a href="#3-store" class="headerlink" title="3. store"></a>3. store</h3><ul>
<li>维持应用的 <code>state</code>；</li>
<li>提供 <code>getState()</code> 方法获取 <code>state</code>；</li>
<li>提供 <code>dispatch(action)</code> 方法更新 <code>state</code>；</li>
<li>通过 <code>subscribe(listener)</code> 注册监听器;</li>
<li>通过 <code>subscribe(listener)</code> 返回的函数注销监听器。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">import todoApp from &apos;./reducers&apos;</div><div class="line">let store = createStore(todoApp)</div></pre></td></tr></table></figure>
<blockquote>
<p>后续会更新的…………….</p>
</blockquote>
<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="异步action"><a href="#异步action" class="headerlink" title="异步action"></a>异步action</h3><h3 id="异步数据流"><a href="#异步数据流" class="headerlink" title="异步数据流"></a>异步数据流</h3><h3 id="Middleware-中间件"><a href="#Middleware-中间件" class="headerlink" title="Middleware 中间件"></a>Middleware 中间件</h3><h3 id="搭配-React-Router"><a href="#搭配-React-Router" class="headerlink" title="搭配 React Router"></a>搭配 React Router</h3><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Native-集成-Redux&quot;&gt;&lt;a href=&quot;#React-Native-集成-Redux&quot; class=&quot;headerlink&quot; title=&quot;React Native 集成 Redux&quot;&gt;&lt;/a&gt;React Native 集成 Redux&lt;/
    
    </summary>
    
    
      <category term="react-native" scheme="http://kaelblog.website/tags/react-native/"/>
    
      <category term="redux" scheme="http://kaelblog.website/tags/redux/"/>
    
      <category term="编程" scheme="http://kaelblog.website/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git入门</title>
    <link href="http://kaelblog.website/2017/08/04/Git%E5%85%A5%E9%97%A8/"/>
    <id>http://kaelblog.website/2017/08/04/Git入门/</id>
    <published>2017-08-04T02:15:50.000Z</published>
    <updated>2017-08-04T07:08:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git入门"><a href="#Git入门" class="headerlink" title="Git入门"></a>Git入门</h1><blockquote>
<p>一小时熟练使用Git基本操作 </p>
</blockquote>
<a id="more"></a>
<h2 id="终端基本命令准备"><a href="#终端基本命令准备" class="headerlink" title="终端基本命令准备"></a>终端基本命令准备</h2><ul>
<li><code>cd &lt;filename&gt;</code> 【切换目录位置】</li>
<li><code>pwd</code> 【显示当前目录位置】</li>
<li><code>mkdir &lt;directoryname&gt;</code> 【创建文件夹】</li>
<li><code>touch &lt;filename&gt;</code> 【创建一个文件】</li>
<li><code>ls</code> 【显示当前目录 可见文件以及文件夹】</li>
<li><code>ls -ah</code> 【显示当前目录下 可见以及不可见的 文件以及文件夹】</li>
<li><code>cat &lt;filename&gt;</code> 【打印文件内容】</li>
<li><code>rm &lt;filename&gt;</code> 【移除某文件】</li>
</ul>
<h2 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h2><ol>
<li>git安装</li>
</ol>
<p>【检测是否安装了 git】：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git</div><div class="line">The program &apos;git&apos; is currently not installed. You can install it by typing:</div><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<p>【安装git】：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<ol>
<li><p>SSH配置</p>
<ol>
<li>打开终端 输入<code>ssh-keygen -t rsa -C zhouzuosong_kael@163.com</code></li>
<li><p>将生成的<code>id_rsa.pub</code>文件打开，拷贝其中的公钥内容，再<strong>github/gitee</strong>上进行粘贴。即可创建和<strong>github/gitee</strong>的ssh链接</p>
<p>直接在终端输入下面这行命令也可以不止公钥:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pbcopy &lt; \~/.ssh/id\_rsa.pub</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<pre><code>3. 测试是否能连接成功：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">kaelinda:~ zhouzuosong$ ssh -T git@github.com</div><div class="line"></div><div class="line">Hi Kaelzzs! You&apos;ve successfully authenticated</div><div class="line">but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
</code></pre><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><ul>
<li><code>git init</code>  【初始化一个git仓库的环境】</li>
<li><code>git add readme.md</code> 【添加一个文件】<ul>
<li><code>git add f1.txt f2.txt</code>  <strong>git add</strong> 可用来【添加多个文件】</li>
<li><code>git add .</code> 【代表添加所有文件改动】</li>
</ul>
</li>
<li><code>git commit readme.md</code> 【提交文件到版本库中】<ul>
<li><code>git commit &lt;filename&gt;</code> 【提交单个文件】</li>
<li><code>git comiit -a</code> 【提交所有文件】</li>
</ul>
</li>
<li><code>git status</code> 【查看当前库的状态】</li>
<li><code>git diff</code> 【查看工作区与版本库的不同】</li>
<li><code>git diff --cached</code>  【查看在暂存区文件的更新】</li>
<li><code>git log</code> 【查看版本历史记录】<ul>
<li><code>git log --pretty=oneline</code> 【显示版本号和commit message】</li>
</ul>
</li>
<li><code>git reset</code><ul>
<li><code>git reset --hard HEAD^</code> 【恢复到上个版本】</li>
<li><code>git reset --hard HEAD^^</code> 【恢复到上上个版本】</li>
<li><code>git reset --hard HEAD~100</code> 【恢复到上100个版本】</li>
<li><code>git reset --hard &lt;commit id&gt;</code> 【恢复到某个提交的指定版本】</li>
</ul>
</li>
<li><code>git reflog</code> 【查看所有命令记录】</li>
<li><code>git checkout -- readme.txt</code>  【这是将<code>readme.txt</code>最近的修改中还未git add 的部分内容撤销，返回到 上次 <code>git add</code> 或者上次<code>git commit</code>的状态。】</li>
<li><code>git reset HEAD filename</code> 【后<code>git checkout -- filename</code> 可将已经 <code>git add</code>的内容撤销，<code>git checkout -- filename</code>再将还未修改<code>git add</code>】 </li>
<li>如果想撤销已经commit的内容 直接<code>git reset --hard</code>一系列命令即可</li>
<li><code>rm filename</code> 删除文件</li>
<li><code>git rm filename</code> 从版本库中删除某一文件 (本地文件也会被移除)</li>
</ul>
<p><strong>撤销修改的思路整理：</strong></p>
<ol>
<li><p>撤销已经更改的 工作区的更改内容 （还未 <code>git add</code>）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --&lt;filename&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>撤销已经<code>git add</code>但还未<code>git commit</code>的内容</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset HEAD &lt;filename&gt;</div><div class="line">git checkout -- &lt;fielname&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>撤销已经commit的某个版本,那就更简单了</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD^</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ul>
<li><p><code>git remote add origin git@github.com:michaelliao/learngit.git</code> 添加远程仓库   </p>
<blockquote>
<p>这里有问题了,如果新建的远程仓库内已经有文件 你是添加不上的，除非你克隆到本地后在进行操作。<br>公钥记得添加到git平台，然后用户名，邮箱添加一下<br> <strong>git config –global user.name “Kaelinda”</strong><br> <strong>git config –global user.email “zhouzuosong_kael@163.com”</strong><br>然后再进行，远程连接才可以</p>
</blockquote>
</li>
<li><p><code>git remote remove oprigin</code> 删除该项目的远程仓库</p>
</li>
<li><code>git push -u origin master</code> 第一次推送到远程仓库</li>
<li><code>git push origin master</code> 之后推送到远程仓库就不再需要<code>-u</code>了</li>
<li><code>git push &lt;仓库源&gt; &lt;分支&gt;</code> 将制定分支推送到指定的git平台上</li>
<li><code>git clone git@github.com:michaelliao/gitskills.git</code> 从远程仓库克隆项目到本地</li>
</ul>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul>
<li><code>git branch -a</code> 【查看所有分支  （远程分支、本地分支）】</li>
<li><code>git branch dev</code> 【创建<code>dev</code>分支】</li>
<li><code>git checkout dev</code> 【切换到<code>dev</code>分支】</li>
<li><code>git checkout -b dev</code> 【创建并切换到分支<code>dev</code>】</li>
<li><code>git branch</code> 【查看当前分支】</li>
<li><code>git branch -d dev</code> 【删除分支 <code>dev</code>】</li>
<li><code>git merge dev</code> 合并某分支<code>dev</code> 【到当前分支<code>master</code>】</li>
<li><code>git pull origin dev：dev</code>  【取回origin主机的dev分支，与本地的dev分支合并】</li>
<li><code>git branch --set-upstream branch-name origin/branch-name</code> 本地分支与远程分支关联</li>
<li><code>git push --delete origin branchName</code> 【删除远程分支】</li>
<li><code>git rm --cached filename</code>  【删除文件在暂缓区的状态】</li>
<li></li>
</ul>
<h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>代表的当前分支内容<br><code>=======</code>分割线<br><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 代表与当前分支冲突的分支内容<br>手动解决冲突后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add &lt;filename&gt;</div><div class="line">git commit -m &quot;resolved conf&quot;</div></pre></td></tr></table></figure>
<p><code>git log --graph --pretty=oneline --abbrev-commit</code> 分支的合并情况<br><code>git branch -d feature1</code> 删除某分支<br><code>git log --graph</code> 分支合并图</p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul>
<li><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code> 意思是 <code>--no-f</code>方式的merge模式 禁用<code>Fast forward</code>模式</li>
<li><code>git stash</code> 将当前分支内 修改了、但是还未<code>git add</code>的内容保存到一个堆栈中</li>
<li><code>git stash list</code> 查看当前项目<code>stash</code>存储堆栈中存储的所有项</li>
<li><code>git stash apply</code> 恢复堆栈顶端的<code>stash</code></li>
<li><code>git stash drop</code> 删除堆栈顶端的<code>stash</code></li>
<li><code>git stash pop</code> 恢复并删除堆栈顶端的<code>stash</code></li>
<li><code>git stash  apply/drop/pop stash@{0}</code> 恢复、删除、恢复并删除 堆栈内指定位置的<code>stash</code></li>
<li><code>git branch -D &lt;branchname&gt;</code> 强行删除某一分支 <code>-d</code>必须是需要在merge了以后才可以删除分支，<code>-D</code>则不需要关注这一点，直接就去删除该分支</li>
</ul>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><ul>
<li><code>git remote</code> 查看远程库信息</li>
<li><code>git remote -v</code> 查看更详细信息 显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址</li>
<li><code>git push origin master/dev/feature</code> 推送分支到远程仓库</li>
<li><a href="http://blog.csdn.net/fuchaosz/article/details/52170105" target="_blank" rel="external">回撤公共分支版本传送门</a></li>
</ul>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ul>
<li><code>git tag</code> 查看仓库的标签信息</li>
<li><code>git tag v1.0.0</code> 给当前版本添加标签信息</li>
<li><code>git tag v1.0.1 &lt;commit_id&gt;</code>给指定的commitid对应版本添加标签</li>
<li><code>git show &lt;tag_name&gt;</code> 查看指定标签对应的版本信息</li>
<li><code>git tag -a v1.1.2 -m &quot;tag message&quot; &lt;commit_id&gt;</code> 给指定版本添加带有说明的标签</li>
<li><code>git tag -s v0.2 -m &quot;message&quot; &lt;commit_id&gt;</code> 通过<code>-s</code> 用私钥签名一个带有说明的标签 </li>
<li><code>git show &lt;tagname&gt;</code> 可以看到PGP签名信息</li>
<li><code>git tag -d &lt;tagname&gt;</code> 删除本地标签</li>
<li><code>git push origin &lt;tabname&gt;</code> 推送某个标签到远程仓库</li>
<li><code>git push origin --tags</code> 推送所有tag到远程仓库</li>
<li><code>git push origin :refs/tags/&lt;tagname&gt;</code> 删除某个远程仓库的tag  <strong>这个命令要配合 <code>git tag -d</code> 来使用</strong>，先删除本地的tag，再删除远程仓库的tag</li>
</ul>
<h2 id="Git-进阶"><a href="#Git-进阶" class="headerlink" title="Git 进阶"></a>Git 进阶</h2><h3 id="自定义git命令简写"><a href="#自定义git命令简写" class="headerlink" title="自定义git命令简写"></a>自定义git命令简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.cm commit</div><div class="line">git config --global alias.br branch</div></pre></td></tr></table></figure>
<h3 id="使用-rebase-拉去上游修改"><a href="#使用-rebase-拉去上游修改" class="headerlink" title="使用 rebase 拉去上游修改"></a>使用 rebase 拉去上游修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//当前处于 test 分支</div><div class="line">git rebase master</div></pre></td></tr></table></figure>
<h3 id="stash-临时性保存修改"><a href="#stash-临时性保存修改" class="headerlink" title="stash 临时性保存修改"></a>stash 临时性保存修改</h3><h3 id="克隆一个特定的远程分支"><a href="#克隆一个特定的远程分支" class="headerlink" title="克隆一个特定的远程分支"></a>克隆一个特定的远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cherry-pick &lt;commit_id&gt;</div></pre></td></tr></table></figure>
<h3 id="一个项目关联多个git平台"><a href="#一个项目关联多个git平台" class="headerlink" title="一个项目关联多个git平台"></a>一个项目关联多个git平台</h3><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><ol>
<li>可以设置整个Git仓库需要忽略的文件。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config –global core.excludesfile ~/.gitignore_global</div><div class="line">$vim ~/.gitignore_global</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git入门&quot;&gt;&lt;a href=&quot;#Git入门&quot; class=&quot;headerlink&quot; title=&quot;Git入门&quot;&gt;&lt;/a&gt;Git入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一小时熟练使用Git基本操作 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OC" scheme="http://kaelblog.website/categories/OC/"/>
    
    
      <category term="Git" scheme="http://kaelblog.website/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 自定义代码块</title>
    <link href="http://kaelblog.website/2017/05/25/Xcode-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>http://kaelblog.website/2017/05/25/Xcode-自定义代码块/</id>
    <published>2017-05-25T08:24:19.000Z</published>
    <updated>2017-05-25T09:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建自定义代码块的好处"><a href="#一、创建自定义代码块的好处" class="headerlink" title="一、创建自定义代码块的好处"></a>一、创建自定义代码块的好处</h2><p>由于项目、所用语言或者编码习惯的差别，不同的程序员习惯用的代码片段也不尽相同，这就有了自定义代码片段的需求，好在Xcode是支持该功能的。他的好处是使程序员以最快的速度输入很常用的代码片段，提高编程效率。</p>
<p>该功能是从Xcode4开始引入的。在Xcode中的位置如下图所示：</p>
<p>如上图，右边系统就定义很对的代码块，包括一些我们很常用的@interface 和@implementation的声明和实现。</p>
<h2 id="二、自定义我们常用的代码块步骤"><a href="#二、自定义我们常用的代码块步骤" class="headerlink" title="二、自定义我们常用的代码块步骤"></a>二、自定义我们常用的代码块步骤</h2><p>Ｅｇ：@property属性的定义是Cocoa程序开发中很常用的一个功能，下面就以此为例说明如何自定义代码片段。</p>
<ol>
<li>书写代码片段</li>
</ol>
<p>在声明@property属性的地方写下如下语句：</p>
<p>@property (nonatomic, retain) \&lt;#type#> \&lt;#name#>;</p>
<p>这里\&lt;#type#>和\&lt;#name#>起什么作用可以在后面的使用效果中看出来。</p>
<ol>
<li>新建代码片段</li>
</ol>
<p>１）点击Code Snippet Library</p>
<p>2)选择User 用户自定义</p>
<p>3）出现如下空白界面</p>
<p>4）把刚编辑好的代码选中，拖到上面的空白处，出现如下的编辑窗口</p>
<p>图中从上到下的含义依次是：</p>
<p>①Title</p>
<p>代码片段的标题</p>
<p>②Summary</p>
<p>代码片段的描述文字</p>
<p>③Platform</p>
<p>可以使用代码片段的平台，有IOS/OS X/All三个选项</p>
<p>④Language</p>
<p>可以在哪些语言中使用该代码片段</p>
<p>⑤Completion Shortcut</p>
<p>代码片段的快捷方式，比如本文开头用到的dowhile，在这里，把属性设置的快捷方式设为property</p>
<p>⑥Completion Scopes</p>
<p>可以在哪些文件中使用当前代码片段，比如全部位置，头文件中等，当然可以添加多个支持的位置。</p>
<p>最后的一个大得空白区域是对代码片段的效果预览。</p>
<p>一切设置完成以后，点击该菜单右下角的Done按钮，新建工作就结束了。</p>
<p>5）验证效果：我在代码里面输入”pro“ 即出现如下提示：（直接点击Enter键，一整条语句就自动补齐了）</p>
<h2 id="三、代码片段的备份"><a href="#三、代码片段的备份" class="headerlink" title="三、代码片段的备份"></a>三、代码片段的备份</h2><p>Xcode中的代码片段默认放在下面的目录中：</p>
<p>~/Library/Developer/Xcode/UserData/CodeSnippets</p>
<p>我们可以将目录中的代码片段备份，也可以将其直接拷出来放在不同的电脑上使用，因此多台电脑之间的协作也毫无压力。</p>
<h2 id="福利传送门"><a href="#福利传送门" class="headerlink" title="福利传送门"></a>福利传送门</h2><p>常用的：<br>1.strong：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic,strong) &lt;#Class#&gt; *&lt;#object#&gt;;</div></pre></td></tr></table></figure></p>
<p>2.weak：<br><code>@property (nonatomic,weak) &lt;#Class#&gt; *&lt;#object#&gt;;</code><br>3.copy：<br><code>@property (nonatomic,copy) NSString *&lt;#string#&gt;;</code><br>4.assign：<br><code>@property (nonatomic,assign) &lt;#Class#&gt; &lt;#property#&gt;;</code><br>5.delegate：<br><code>@property (nonatomic,weak) id&lt;&lt;#protocol#&gt;&gt; &lt;#delegate#&gt;;</code><br>6.block：<br><code>@property (nonatomic,copy) &lt;#Block#&gt; &lt;#block#&gt;;</code><br>7.mark：<br><code>#pragma mark &lt;#mark#&gt;</code><br>8.ReUseCell：<br><figure class="highlight plain"><figcaption><span>NSString rid=<#rid#>;  </#rid#></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> \&lt;#Class#\&gt; *cell=[tableView dequeueReusableCellWithIdentifier:rid]();  </div><div class="line"> if(cell==nil)&#123;  </div><div class="line"></div><div class="line"> cell=[\[\&lt;#Class#\&gt; alloc]() initWithStyle:UITableViewCellStyleDefault      reuseIdentifier:rid];  </div><div class="line"> &#125;  </div><div class="line"> return cell;</div></pre></td></tr></table></figure></p>
<p>9.MainGCD：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;  </div><div class="line">\&lt;#code#\&gt;  </div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>10.AfterGCD：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(\&lt;#delayInSeconds#\&gt; * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;  </div><div class="line">\&lt;#code to be executed after a specified delay#\&gt;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>11.OnceGCD：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> static dispatch_once_t onceToken;  </div><div class="line"> dispatch_once(&amp;onceToken, ^&#123;  </div><div class="line">\&lt;#code to be executed once#\&gt;  </div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、创建自定义代码块的好处&quot;&gt;&lt;a href=&quot;#一、创建自定义代码块的好处&quot; class=&quot;headerlink&quot; title=&quot;一、创建自定义代码块的好处&quot;&gt;&lt;/a&gt;一、创建自定义代码块的好处&lt;/h2&gt;&lt;p&gt;由于项目、所用语言或者编码习惯的差别，不同的程序员习
    
    </summary>
    
    
      <category term="Xcode" scheme="http://kaelblog.website/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>RunTime-笔记</title>
    <link href="http://kaelblog.website/2017/05/19/RunTime-%E7%AC%94%E8%AE%B0/"/>
    <id>http://kaelblog.website/2017/05/19/RunTime-笔记/</id>
    <published>2017-05-19T06:55:34.000Z</published>
    <updated>2017-05-19T10:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RunTime-笔记"><a href="#RunTime-笔记" class="headerlink" title="RunTime-笔记"></a>RunTime-笔记</h1><hr>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Class-Definition-Data-Structures"><a href="#Class-Definition-Data-Structures" class="headerlink" title="Class-Definition Data Structures"></a>Class-Definition Data Structures</h3><ul>
<li><code>class</code> : 定义数据类型 – Class-Definition Data Structures.</li>
<li><code>Method</code> : 类中定义的方法的<code>不透明类型</code> – An opaque type that represents an Objective-C class.</li>
<li><code>Ivar</code> : 实例变量的 <code>不透明类型</code> – An opaque type that represents a method in a class definition.</li>
<li><code>Category</code> : 类别 – An opaque type that represents an instance variable.</li>
<li><code>objc_property_t</code> : 表示OC中声明的属性的 <code>不透明类型</code> – An opaque type that represents a category.</li>
<li><code>IMP</code> : 指向方法的实现的指针 – An opaque type that represents an Objective-C declared property.</li>
<li><code>SEL</code> : 方法选择器的不透明类型 – A pointer to the start of a method implementation.</li>
<li><code>objc_method_description</code> :  方法的不透明类型 – Defines an opaque type that represents a method selector.</li>
<li><code>objc_method_listDeprecated</code> :  定义了Objective-C 的方法 – Defines an Objective-C method.</li>
<li><code>objc_cache</code> : 方法声明的list;主要是缓存了父类等的方法； – Contains an array of method definitions.</li>
<li><code>objc_protocol_list</code> : 协议列表 – Represents a list of formal protocols.</li>
<li><code>objc_property_attribute_t</code> : property的属性描述。– Defines a property attribute. </li>
<li><code>id</code> : 一个指向某各类的实例对象的指针 – A pointer to an instance of a class.</li>
<li><code>objc_object</code> :某各类的实例对象 – Represents an instance of a class.</li>
<li><code>objc_super</code> :某个对象的父类(超类) – Specifies the superclass of an instance.</li>
<li><code>BOOL</code> : 布尔类型</li>
<li><code>objc_AssociationPolicy</code> : 联想类型的类型指定 – Type to specify the behavior of an association.</li>
</ul>
<h3 id="Consstans"><a href="#Consstans" class="headerlink" title="Consstans"></a>Consstans</h3><ul>
<li><code>Boolean Values</code> : 布尔值  –  These macros define convenient constants to represent Boolean values.</li>
<li><code>Null Value</code> : 类或者实例对象为空的  宏定义 – These macros define null values for classes and instances.</li>
<li><code>Dispatch Function Prototypes</code> : 此宏指示是否必须将调度函数转换为适当的函数指针类型。– This macro indicates whether dispatch functions must be cast to an appropriate function pointer type.</li>
<li><code>Objective-C Root Class</code> : This macro annotates a class as being an Objective-C root class.</li>
<li><code>Local Variable Storage Duration</code> :  This macro indicates that the values stored in certain local variables should not be aggressively released by the compiler during optimization.</li>
<li><code>Associative Object Behaviors</code> : Policies related to associative references.</li>
</ul>
<h3 id="粗暴理解"><a href="#粗暴理解" class="headerlink" title="粗暴理解"></a>粗暴理解</h3><hr>
<p><a href="http://www.jianshu.com/p/f900de4a1495" target="_blank" rel="external">Runtime粗暴理解-传送门</a></p>
<blockquote>
<p><code>实例对象</code>(instance)只存放<code>isa</code>指针和<code>实例变量</code>，由isa指针找到所属<code>class</code>，<code>class</code>维护一个运行时可接收的<code>方法列表</code>；<code>方法列表</code>中的每个入口是一个<code>方法</code>(Method)，其中key是一个特定名称，即<code>选择器</code>(SEL)，其对应一个指向底层C<code>实现函数的指针</code>，即实现(IMP)，。运行时机制最关键核心是objc_msgSend函数，通过给<code>target</code>（类）发送<code>selecter</code>（SEL）来传递消息，找到匹配的<code>IMP</code>，指向实现的C函数。</p>
</blockquote>
<h4 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">struct objc_class &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"></div><div class="line">#if !__OBJC2__</div><div class="line">    Class super_class                       OBJC2_UNAVAILABLE;  // 父类</div><div class="line"></div><div class="line">    const char *name                        OBJC2_UNAVAILABLE;  // 类名</div><div class="line">    long version                            OBJC2_UNAVAILABLE;  // 类的版本信息，默认为0</div><div class="line">    long info                               OBJC2_UNAVAILABLE;  // 类信息，供运行期使用的一些位标识</div><div class="line"></div><div class="line">    long instance_size                      OBJC2_UNAVAILABLE;  // 类的实例变量大小</div><div class="line">    struct objc_ivar_list *ivars            OBJC2_UNAVAILABLE;  // 类的成员变量链表</div><div class="line"></div><div class="line">    struct objc_method_list **methodLists   OBJC2_UNAVAILABLE;  // 方法定义的链表</div><div class="line">    struct objc_cache *cache                OBJC2_UNAVAILABLE;  // 方法缓存</div><div class="line"></div><div class="line">    struct objc_protocol_list *protocols    OBJC2_UNAVAILABLE;  // 协议链表</div><div class="line">#endif</div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<p>id类型的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct objc_object &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">typedef struct objc_object *id;</div></pre></td></tr></table></figure></p>
<p>Ivar结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_ivar *Ivar;</div><div class="line"></div><div class="line">struct objc_ivar &#123;</div><div class="line">    char *ivar_name                 OBJC2_UNAVAILABLE;  // 变量名</div><div class="line">    char *ivar_type                 OBJC2_UNAVAILABLE;  // 变量类型</div><div class="line">    int ivar_offset                 OBJC2_UNAVAILABLE;  // 基地址偏移字节</div><div class="line">#ifdef __LP64__</div><div class="line">    int space                       OBJC2_UNAVAILABLE;</div><div class="line">#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>objc_property_t:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_property *objc_property_t;</div></pre></td></tr></table></figure></p>
<p>objc_property_attribute_t:（属性的特性有：返回值、是否为atomic、getter/setter名字、是否为dynamic、背后使用的ivar名字、是否为弱引用等）；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（属性的特性有：返回值、是否为atomic、getter/setter名字、是否为dynamic、背后使用的ivar名字、是否为弱引用等）；</div></pre></td></tr></table></figure></p>
<p>SEL:可以看做Method的ID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_selector *SEL;</div></pre></td></tr></table></figure></p>
<p>IMP:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedefine id (*IMP)(id, SEL, ...)</div></pre></td></tr></table></figure></p>
<p>objc_method_list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct objc_method_list &#123;</div><div class="line">    struct objc_method_list *obsolete                        OBJC2_UNAVAILABLE;</div><div class="line">    int method_count                                                 OBJC2_UNAVAILABLE;</div><div class="line">#ifdef __LP64__</div><div class="line">    int space                                                              OBJC2_UNAVAILABLE;</div><div class="line">#endif</div><div class="line">    /* variable length structure */</div><div class="line">    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>cache:<br><em>方法调用最先是在方法缓存里找的，方法调用是懒调用，第一次调用时加载后加到缓存池里。一个objc程序启动后，需要进行类的初始化、调用方法时的cache初始化，再发送消息的时候就直接走缓存（引申：+load方法和+initialize方法。load方法是首次加载类时调用，绝对只调用一次；initialize方法是首次给类发消息时调用，通常只调用一次，但如果它的子类初始化时未定义initialize方法，则会再调用一次它的initialize方法）。</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct objc_cache &#123;</div><div class="line">    // 缓存bucket的总数</div><div class="line">    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;</div><div class="line"></div><div class="line">    // 实际缓存bucket的总数</div><div class="line">    unsigned int occupied                                    OBJC2_UNAVAILABLE;</div><div class="line">    // 指向Method数据结构指针的数组</div><div class="line">    Method buckets[1]                                        OBJC2_UNAVAILABLE;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Protocol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_object Protocol;</div></pre></td></tr></table></figure></p>
<p>category:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_category *Category;</div><div class="line"></div><div class="line">struct objc_category &#123;</div><div class="line">    char *category_name                          OBJC2_UNAVAILABLE; // 分类名</div><div class="line">    char *class_name                             OBJC2_UNAVAILABLE; // 分类所属的类名</div><div class="line">    struct objc_method_list *instance_methods    OBJC2_UNAVAILABLE; // 实例方法列表</div><div class="line">    struct objc_method_list *class_methods       OBJC2_UNAVAILABLE; // 类方法列表</div><div class="line">    struct objc_protocol_list *protocols         OBJC2_UNAVAILABLE; // 分类所实现的协议列表</div><div class="line">&#125;  </div><div class="line"></div><div class="line">// objc-runtime-new.h中定义：</div><div class="line">struct category_t &#123;</div><div class="line">    const char *name;                        // name 是指 class_name 而不是 category_name</div><div class="line">    classref_t cls;                          // cls是要扩展的类对象，编译期间是不会定义的，而是在Runtime阶段通过name对应到对应的类对象</div><div class="line">    struct method_list_t *instanceMethods;       </div><div class="line">    struct method_list_t *classMethods;</div><div class="line">    struct protocol_list_t *protocols;</div><div class="line">    struct property_list_t *instanceProperties;    // instanceProperties表示Category里所有的properties，(这就是我们可以通过objc_setAssociatedObject和objc_getAssociatedObject增加实例变量的原因，)不过这个和一般的实例变量是不一样的</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="文档API结构"><a href="#文档API结构" class="headerlink" title="文档API结构"></a>文档API结构</h3><h4 id="Class-Definition"><a href="#Class-Definition" class="headerlink" title="Class-Definition"></a>Class-Definition</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">- 类相关：</div><div class="line">          + 数据类型：class，object；</div><div class="line">                   - isa 元类</div><div class="line">                   - superClass 根类</div><div class="line">          + 操作函数:</div><div class="line">                    - class_：</div><div class="line">                              + get: 类名，父类; 实例变量，成员变量；属性；实例方法，类方法，方法实现；</div><div class="line">                              + copy: 成员变量列表；属性列表；方法列表；协议列表；</div><div class="line">                              + add: 成员变量；属性；方法；协议；</div><div class="line">                              + replace：属性；方法；</div><div class="line">                              + respond:响应方法判断（内省）</div><div class="line">                              + isMetaclass:元类判断（内省）</div><div class="line">                              + conform:遵循协议判断（内省）</div><div class="line">                    - objc_：</div><div class="line">                              + get: 实例变量；成员变量；类名；类；元类；关联对象；</div><div class="line">                              + copy: 对象；类；类列表；协议列表；</div><div class="line">                              + set: 实例变量；成员变量；类；类列表；协议；关联对象；</div><div class="line">                              + dispose: 对象；</div><div class="line">                    - 动态创建/销毁类、对象</div><div class="line">  - 成员变量、属性相关：</div><div class="line">          + 数据类型：Ivar；objc_property_t；objc_property_attribute_t；</div><div class="line">          + 操作函数：</div><div class="line">                     - ivar_：</div><div class="line">                     - property_：</div><div class="line">  - 方法消息相关：</div><div class="line">          + 数据类型：SEL；IMP; Method；方法缓存</div><div class="line">          + 操作函数: </div><div class="line">                     - method_：</div><div class="line">                              + invoke: 方法实现的返回值；</div><div class="line">                              + get: 方法名；方法实现；参数与返回值相关；</div><div class="line">                              + set：方法实现；</div><div class="line">                              + exchange：交换方法实现</div><div class="line">          + 方法调用：msgSend函数（找到方法实现）</div><div class="line">          + 消息转发：</div><div class="line">                    - Method Resolution</div><div class="line">                    - Fast Forwarding</div><div class="line">                    - Normal Forwarding</div><div class="line">  - 协议相关：</div><div class="line">          + 数据类型：Protocol；</div><div class="line">          + 操作函数：</div><div class="line">                     - protocol_：</div><div class="line">                              + get: 协议；属性；</div><div class="line">                              + copy：协议列表；属性列表；</div><div class="line">                              + add：属性；方法；协议；</div><div class="line">                              + isEqual：判断两协议等同；</div><div class="line">                              + comform：判断是否遵循协议；</div><div class="line">  - 其他：类名；版本号；类信息；（忽略）</div></pre></td></tr></table></figure>
<h4 id="Class-API"><a href="#Class-API" class="headerlink" title="Class API"></a>Class API</h4><h5 id="class"><a href="#class" class="headerlink" title="class"></a>class</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 获取类的类名</div><div class="line">const char * class_getName ( Class cls );</div><div class="line">// 获取类的父类</div><div class="line">Class class_getSuperclass ( Class cls );</div><div class="line"></div><div class="line">// 获取实例大小</div><div class="line">size_t class_getInstanceSize ( Class cls );</div><div class="line">// 获取类中指定名称实例成员变量的信息</div><div class="line">Ivar class_getInstanceVariable ( Class cls, const char *name );</div><div class="line">// 获取类成员变量的信息</div><div class="line">Ivar class_getClassVariable ( Class cls, const char *name );</div><div class="line">// 获取指定的属性</div><div class="line">objc_property_t class_getProperty ( Class cls, const char *name );</div><div class="line"></div><div class="line">// 获取实例方法</div><div class="line">Method class_getInstanceMethod ( Class cls, SEL name );</div><div class="line">// 获取类方法</div><div class="line">Method class_getClassMethod ( Class cls, SEL name );</div><div class="line">// 获取方法的具体实现</div><div class="line">IMP class_getMethodImplementation ( Class cls, SEL name );</div><div class="line">IMP class_getMethodImplementation_stret ( Class cls, SEL name );</div></pre></td></tr></table></figure>
<h5 id="copy-成员变量列表-ivarList-；属性列表-propertyList-；方法列表-methodList-；协议列表-protocolList-；"><a href="#copy-成员变量列表-ivarList-；属性列表-propertyList-；方法列表-methodList-；协议列表-protocolList-；" class="headerlink" title="copy :成员变量列表(ivarList)；属性列表(propertyList)；方法列表(methodList)；协议列表(protocolList)；"></a>copy :成员变量列表(ivarList)；属性列表(propertyList)；方法列表(methodList)；协议列表(protocolList)；</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 获取整个成员变量列表</div><div class="line">Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );</div><div class="line">// 获取属性列表</div><div class="line">objc_property_t * class_copyPropertyList ( Class cls, unsigned int *outCount );</div><div class="line">// 获取所有方法的列表</div><div class="line">Method * class_copyMethodList ( Class cls, unsigned int *outCount );</div><div class="line">// 获取类实现的协议列表</div><div class="line">Protocol * class_copyProtocolList ( Class cls, unsigned int *outCount );</div></pre></td></tr></table></figure>
<h5 id="add-成员变量（Ivar）；属性-Property-；方法-Method-；协议-Protocol-；"><a href="#add-成员变量（Ivar）；属性-Property-；方法-Method-；协议-Protocol-；" class="headerlink" title="add : 成员变量（Ivar）；属性(Property)；方法(Method)；协议(Protocol)；"></a>add : 成员变量（Ivar）；属性(Property)；方法(Method)；协议(Protocol)；</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 添加成员变量</div><div class="line">BOOL class_addIvar ( Class cls, const char *name, size_t size, uint8_t alignment, const char *types );</div><div class="line">// 添加属性</div><div class="line">BOOL class_addProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</div><div class="line">// 添加方法</div><div class="line">BOOL class_addMethod ( Class cls, SEL name, IMP imp, const char *types );</div><div class="line">// 添加协议</div><div class="line">BOOL class_addProtocol ( Class cls, Protocol *protocol );</div></pre></td></tr></table></figure>
<h5 id="replace-属性（Property）；方法（Method）；"><a href="#replace-属性（Property）；方法（Method）；" class="headerlink" title="replace : 属性（Property）；方法（Method）；"></a>replace : 属性（Property）；方法（Method）；</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 替换类的属性</div><div class="line">void class_replaceProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</div><div class="line">// 替代方法的实现</div><div class="line">IMP class_replaceMethod ( Class cls, SEL name, IMP imp, const char *types );</div></pre></td></tr></table></figure>
<h5 id="respond-相应方法判断"><a href="#respond-相应方法判断" class="headerlink" title="respond : 相应方法判断"></a>respond : 相应方法判断</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 类实例是否响应指定的selector</div><div class="line">BOOL class_respondsToSelector ( Class cls, SEL sel );</div></pre></td></tr></table></figure>
<h5 id="isMetaClass-元类判断（内省）"><a href="#isMetaClass-元类判断（内省）" class="headerlink" title="isMetaClass : 元类判断（内省）"></a>isMetaClass : 元类判断（内省）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 判断给定的Class是否是一个元类</div><div class="line">BOOL class_isMetaClass ( Class cls );</div></pre></td></tr></table></figure>
<h5 id="conform-遵循协议判断（内省）"><a href="#conform-遵循协议判断（内省）" class="headerlink" title="conform:遵循协议判断（内省）"></a>conform:遵循协议判断（内省）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 返回类是否实现指定的协议</div><div class="line">BOOL class_conformsToProtocol ( Class cls, Protocol *protocol );</div></pre></td></tr></table></figure>
<h5 id="objc"><a href="#objc" class="headerlink" title="objc_ :"></a>objc_ :</h5><p>get:实例变量(instance)；成员变量；类名(className)；类(class)；元类(metaClass)；关联对象(AssociationObject)；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 获取对象实例变量</div><div class="line">Ivar object_getInstanceVariable ( id obj, const char *name, void **outValue );</div><div class="line">// 获取对象中实例变量的值</div><div class="line">id object_getIvar ( id obj, Ivar ivar );</div><div class="line">// 获取对象的类名</div><div class="line">const char * object_getClassName ( id obj );</div><div class="line">// 获取对象的类</div><div class="line">Class object_getClass ( id obj );</div><div class="line">Class objc_getClass ( const char *name );</div><div class="line">// 返回指定类的元类</div><div class="line">Class objc_getMetaClass ( const char *name );</div><div class="line">//获取关联对象</div><div class="line">id objc_getAssociatedObject(self, &amp;myKey);</div></pre></td></tr></table></figure></p>
<p>copy：对象；类；类列表；协议列表；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 获取指定对象的一份拷贝</div><div class="line">id object_copy ( id obj, size_t size );</div><div class="line">// 创建并返回一个指向所有已注册类的指针列表</div><div class="line">Class * objc_copyClassList ( unsigned int *outCount );</div></pre></td></tr></table></figure>
<p> set: 实例变量；类；类列表；协议；关联对象；</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 设置类实例的实例变量的值</div><div class="line">Ivar object_setInstanceVariable ( id obj, const char *name, void *value );</div><div class="line">// 设置对象中实例变量的值</div><div class="line">void object_setIvar ( id obj, Ivar ivar, id value );</div><div class="line">//设置关联对象</div><div class="line">void objc_setAssociatedObject(self, &amp;myKey, anObject, OBJC_ASSOCIATION_RETAIN);</div></pre></td></tr></table></figure>
<p>dispose: 对象；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 释放指定对象占用的内存</div><div class="line">id object_dispose ( id obj );</div></pre></td></tr></table></figure></p>
<h5 id="动态创建-销毁类、对象"><a href="#动态创建-销毁类、对象" class="headerlink" title="动态创建/销毁类、对象"></a>动态创建/销毁类、对象</h5><p>动态创建/销毁类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 释放指定对象占用的内存</div><div class="line">id object_dispose ( id obj );</div></pre></td></tr></table></figure></p>
<p>动态创建/销毁对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 创建类实例</div><div class="line">id class_createInstance ( Class cls, size_t extraBytes );</div><div class="line"></div><div class="line">// 在指定位置创建类实例</div><div class="line">id objc_constructInstance ( Class cls, void *bytes );</div><div class="line"></div><div class="line">// 销毁类实例</div><div class="line">void * objc_destructInstance ( id obj );</div></pre></td></tr></table></figure></p>
<h5 id="ivar"><a href="#ivar" class="headerlink" title="ivar_"></a>ivar_</h5><p> get:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 获取成员变量名</div><div class="line">const char * ivar_getName ( Ivar v );</div><div class="line"></div><div class="line">// 获取成员变量类型编码</div><div class="line">const char * ivar_getTypeEncoding ( Ivar v );</div><div class="line"></div><div class="line">// 获取成员变量的偏移量</div><div class="line">ptrdiff_t ivar_getOffset ( Ivar v );</div></pre></td></tr></table></figure></p>
<h5 id="property"><a href="#property" class="headerlink" title="property_:"></a>property_:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取属性名</div><div class="line">const char * property_getName ( objc_property_t property );</div><div class="line"></div><div class="line">// 获取属性特性描述字符串</div><div class="line">const char * property_getAttributes ( objc_property_t property );</div><div class="line"></div><div class="line">// 获取属性中指定的特性</div><div class="line">char * property_copyAttributeValue ( objc_property_t property, const char *attributeName );</div><div class="line"></div><div class="line">// 获取属性的特性列表</div><div class="line">objc_property_attribute_t * property_copyAttributeList ( objc_property_t property, unsigned int *outCount );</div></pre></td></tr></table></figure>
<h5 id="IMP"><a href="#IMP" class="headerlink" title="IMP:"></a>IMP:</h5><p><em>IMP是指向实现函数的指针，通过SEL取得IMP后，我们就获得了最终要找的实现函数的入口。</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedefine id (*IMP)(id, SEL, ...)</div></pre></td></tr></table></figure></p>
<h5 id="Method"><a href="#Method" class="headerlink" title="Method:"></a>Method:</h5><p><em>这个结构体相当于在SEL和IMP之间作了一个绑定。这样有了SEL，我们便可以找到对应的IMP，从而调用方法的实现代码。（在运行时才将SEL和IMP绑定, 动态配置方法）</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_method *Method;</div><div class="line"></div><div class="line">struct objc_method &#123;</div><div class="line">    SEL method_name                 OBJC2_UNAVAILABLE;  // 方法名</div><div class="line">    char *method_types                  OBJC2_UNAVAILABLE; // 参数类型</div><div class="line">    IMP method_imp                      OBJC2_UNAVAILABLE;  // 方法实现</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>objc_method_list</code> 就是用来存储当前类的方法链表，objc_method存储了类的某个方法的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct objc_method_list &#123;</div><div class="line">    struct objc_method_list *obsolete                        OBJC2_UNAVAILABLE;</div><div class="line">    int method_count                                                 OBJC2_UNAVAILABLE;</div><div class="line">#ifdef __LP64__</div><div class="line">    int space                                                              OBJC2_UNAVAILABLE;</div><div class="line">#endif</div><div class="line">    /* variable length structure */</div><div class="line">    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="method"><a href="#method" class="headerlink" title="method_:"></a>method_:</h5><p>invoke:方法实现的返回值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 调用指定方法的实现</div><div class="line">id method_invoke ( id receiver, Method m, ... );</div><div class="line"></div><div class="line">// 调用返回一个数据结构的方法的实现</div><div class="line">void method_invoke_stret ( id receiver, Method m, ... );</div></pre></td></tr></table></figure></p>
<p>get:方法名；方法实现；参数与返回值相关；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取方法名</div><div class="line">SEL method_getName ( Method m );</div><div class="line"></div><div class="line">// 返回方法的实现</div><div class="line">IMP method_getImplementation ( Method m );</div><div class="line">// 获取描述方法参数和返回值类型的字符串</div><div class="line">const char * method_getTypeEncoding ( Method m );</div><div class="line">// 返回方法的参数的个数</div><div class="line">unsigned int method_getNumberOfArguments ( Method m );</div><div class="line">// 通过引用返回方法指定位置参数的类型字符串</div><div class="line">void method_getArgumentType ( Method m, unsigned int index, char *dst, size_t dst_len );</div></pre></td></tr></table></figure></p>
<p>copy:返回值类型；参数类型；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 获取方法的返回值类型的字符串</div><div class="line">char * method_copyReturnType ( Method m );</div><div class="line"></div><div class="line">// 获取方法的指定位置参数的类型字符串</div><div class="line">char * method_copyArgumentType ( Method m, unsigned int index );</div><div class="line"></div><div class="line">// 通过引用返回方法的返回值类型字符串</div><div class="line">void method_getReturnType ( Method m, char *dst, size_t dst_len );</div></pre></td></tr></table></figure></p>
<p>set:方法实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置方法的实现</div><div class="line">IMP method_setImplementation ( Method m, IMP imp );</div></pre></td></tr></table></figure></p>
<p>exchange：交换方法实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置方法的实现</div><div class="line">IMP method_setImplementation ( Method m, IMP imp );</div></pre></td></tr></table></figure></p>
<p>description:方法描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 返回指定方法的方法描述结构体</div><div class="line">struct objc_method_description * method_getDescription ( Method m );</div></pre></td></tr></table></figure></p>
<p>sel_<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 返回给定选择器指定的方法的名称</div><div class="line">const char * sel_getName ( SEL sel );</div><div class="line"></div><div class="line">// 在Objective-C Runtime系统中注册一个方法，将方法名映射到一个选择器，并返回这个选择器</div><div class="line">SEL sel_registerName ( const char *str );</div><div class="line"></div><div class="line">// 在Objective-C Runtime系统中注册一个方法</div><div class="line">SEL sel_getUid ( const char *str );</div><div class="line"></div><div class="line">// 比较两个选择器</div><div class="line">BOOL sel_isEqual ( SEL lhs, SEL rhs );</div></pre></td></tr></table></figure></p>
<p>向对象发送消息，实际上是调用objc_msgSend函数，obj_msgSend的实际动作就是：找到这个函数指针，然后调用它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSend(receiver self, selector _cmd, arg1, arg2, ...)</div></pre></td></tr></table></figure>
<blockquote>
<p>self和_cmd是隐藏参数，在编译期被插入实现代码。<br>self：指向消息的接受者target的对象类型，作为一个占位参数，消息传递成功后self将指向消息的receiver。<br>_cmd: 指向方法实现的SEL类型。<br>当向一般对象发送消息时，调用objc_msgSend；当向super发送消息时，调用的是objc_msgSendSuper； 如果返回值是一个结构体，则会调用objc_msgSend_stret或objc_msgSendSuper_stret。</p>
<p>0.1-检查target是否为nil。如果为nil，直接cleanup，然后return。(这就是我们可以向nil发送消息的原因。)<br>如果方法返回值是一个对象，那么发送给nil的消息将返回nil；如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void<em>)，float，double，long double 或者long long的整型标量，发送给nil的消息将返回0；如果方法返回值为结构体,发送给nil的消息将返回0。结构体中各个字段的值将都是0；如果方法的返回值不是上述提到的几种情况，那么发送给nil的消息的返回值将是未定义的。<br>0.2-如果target非nil，在target的Class中根据Selector去找IMP。（因为同一个方法可能在不同的类中有不同的实现，所以我们需要依赖于接收者的类来找到的确切的实现）。<br>1-首先它找到selector对应的方法实现:
</em>1.1-在target类的方法缓存列表里检查有没有对应的方法实现，有的话，直接调用。<br><em>1.2-比较请求的selector和类方法列表中的selector，对应的话，直接调用。
</em>1.3-比较请求的selector和父类方法列表，父类的父类，直至根类，如果有对应，则直接调用。（方法重写拦截父类方法的原理）<br>2-调用方法实现，并将接收者对象及方法的所有参数传给它。<br>3-最后，将实现函数的返回值作为自己的返回值。</p>
</blockquote>
<h5 id="protocol"><a href="#protocol" class="headerlink" title="protocol:"></a>protocol:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_object Protocol;</div></pre></td></tr></table></figure>
<p>protocol是一个对象结构体。</p>
<ul>
<li><p>objc_:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 返回指定的协议</div><div class="line">Protocol * objc_getProtocol ( const char *name );</div><div class="line"></div><div class="line">// 获取运行时所知道的所有协议的数组</div><div class="line">Protocol ** objc_copyProtocolList ( unsigned int *outCount );</div><div class="line"></div><div class="line">// 创建新的协议实例</div><div class="line">Protocol * objc_allocateProtocol ( const char *name );</div><div class="line"></div><div class="line">// 在运行时中注册新创建的协议</div><div class="line">void objc_registerProtocol ( Protocol *proto );</div></pre></td></tr></table></figure>
</li>
<li><p>protocol_:<br>get:协议；属性；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 返回协议名</div><div class="line">const char * protocol_getName ( Protocol *p );</div><div class="line">// 获取协议的指定属性</div><div class="line">objc_property_t protocol_getProperty ( Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty );</div></pre></td></tr></table></figure>
</li>
<li><p>copy:协议列表；属性列表；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 获取协议中的属性列表</div><div class="line">objc_property_t * protocol_copyPropertyList ( Protocol *proto, unsigned int *outCount );</div><div class="line">// 获取协议采用的协议</div><div class="line">Protocol ** protocol_copyProtocolList ( Protocol *proto, unsigned int *outCount );</div></pre></td></tr></table></figure>
</li>
<li><p>add:属性；方法；协议；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 为协议添加方法</div><div class="line">void protocol_addMethodDescription ( Protocol *proto, SEL name, const char *types, BOOL isRequiredMethod, BOOL isInstanceMethod );</div><div class="line"></div><div class="line">// 添加一个已注册的协议到协议中</div><div class="line">void protocol_addProtocol ( Protocol *proto, Protocol *addition );</div><div class="line"></div><div class="line">// 为协议添加属性</div><div class="line">void protocol_addProperty ( Protocol *proto, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty );</div></pre></td></tr></table></figure>
</li>
<li><p>isEqual：判断两协议等同；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 测试两个协议是否相等</div><div class="line">BOOL protocol_isEqual ( Protocol *proto, Protocol *other );</div></pre></td></tr></table></figure>
</li>
<li><p>comform：判断是否遵循协议；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 查看协议是否采用了另一个协议</div><div class="line">BOOL protocol_conformsToProtocol ( Protocol *proto, Protocol *other );</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="category"><a href="#category" class="headerlink" title="category"></a>category</h5><ul>
<li>super:</li>
</ul>
<blockquote>
<p>struct objc_super {<br>   <strong>unsafe_unretained id receiver;
   </strong>unsafe_unretained Class super_class;<br>};</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct objc_super &#123;</div><div class="line">   __unsafe_unretained id receiver;</div><div class="line">   __unsafe_unretained Class super_class;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>原理：使用super来接收消息时，编译器会生成一个objc_super结构体。发送消息时，不是调用objc_msgSend函数，而是调用objc_msgSendSuper函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSendSuper ( struct objc_super *super, SEL op, ... );</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RunTime-笔记&quot;&gt;&lt;a href=&quot;#RunTime-笔记&quot; class=&quot;headerlink&quot; title=&quot;RunTime-笔记&quot;&gt;&lt;/a&gt;RunTime-笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=
    
    </summary>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
      <category term="runtime" scheme="http://kaelblog.website/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime 文档解读</title>
    <link href="http://kaelblog.website/2017/05/16/Objective-C-Runtime-%E6%96%87%E6%A1%A3%E8%A7%A3%E8%AF%BB/"/>
    <id>http://kaelblog.website/2017/05/16/Objective-C-Runtime-文档解读/</id>
    <published>2017-05-16T11:21:56.000Z</published>
    <updated>2017-05-17T10:46:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C-Runtime-文档解读"><a href="#Objective-C-Runtime-文档解读" class="headerlink" title="Objective-C Runtime 文档解读"></a>Objective-C Runtime 文档解读</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Describes the macOS Objective-C runtime library support functions and data structures.</p>
</blockquote>
<p>介绍了<code>MacOS Objective-C</code> 运行时库支持的函数和数据结构。</p>
<h2 id="Overview-概述："><a href="#Overview-概述：" class="headerlink" title="Overview - 概述："></a>Overview - 概述：</h2><blockquote>
<p>The Objective-C runtime is a runtime library that provides support for the dynamic properties of the Objective-C language, and as such is linked to by all Objective-C apps. Objective-C runtime library support functions are implemented in the shared library found at /usr/lib/libobjc.A.dylib.</p>
</blockquote>
<p><code>Objective-C runtime</code>是一个为Objective-C语言提供底层支持运行时库，因此它跟所有的Objective-C 应用都有所关联。Objective-C runtime 库所支持的方法（函数、功能？）共享在  /usr/lib/libobjc.A.dylib中。</p>
<a id="more"></a>
<blockquote>
<p>You typically don’t need to use the Objective-C runtime library directly when programming in Objective-C. This API is useful primarily for developing bridge layers between Objective-C and other languages, or for low-level debugging.</p>
</blockquote>
<p>在使用Objective-C编程的时候，你通常不需要直接使用 Objective-C runtime 运行时的库。这个库的API 在跟其他语言之间混和开发 和 底层调试的时候是非常有用的。</p>
<blockquote>
<p>The macOS implementation of the Objective-C runtime library is unique to the Mac. For other platforms, the GNU Compiler Collection provides a different implementation with a similar API. This document covers only the macOS implementation.</p>
</blockquote>
<p>MacOS的Objective-C runtime实现 对于Mac来说是独一无二的。对于其他平台，GNU编译器集合提供了一个类似API的不同实现。本文件只包括MacOS的实现。</p>
<blockquote>
<p>The low-level Objective-C runtime API is significantly updated in OS X version 10.5. Many functions and all existing data structures are replaced with new functions. The old functions and structures are deprecated in 32-bit and absent in 64-bit mode. The API constrains several values to 32-bit ints even in 64-bit mode—class count, protocol count, methods per class, ivars per class, arguments per method, sizeof(all arguments) per method, and class version number. In addition, the new Objective-C ABI (not described here) further constrains sizeof(anInstance) to 32 bits, and three other values to 24 bits—methods per class, ivars per class, and sizeof(a single ivar). Finally, the obsolete NXHashTable and NXMapTable are limited to 4 billion items.</p>
</blockquote>
<p>Objective-C runtime的底层API在OS X 10.5 有了大幅更新。许多方法 和 现存的数据结构被新的方法所替代。 老的方法和数据结构在32位机上已不推荐使用， 64位机上已经没有了这些方法。API的限制值为32位整型数甚至在64位模式的类数，协议数，每个类的方法数，该类的每个方法的参数，方法的sizeof，class版本数。此外，新的Objective-C ABI（这里没有描述）进一步约束sizeof（例）32位，和其他三个值到24位每类方法，该类，和sizeof（单Ivar）。最后，陈旧的NXHashtable和NXMaptable限40亿成员。</p>
<h2 id="String-Encoding"><a href="#String-Encoding" class="headerlink" title="String Encoding"></a>String Encoding</h2><p>All char * in the runtime API should be considered to have UTF-8 encoding.</p>
<p>字符串编码：<br>运行时API中所有的 char *强制进行了UTF8编码。</p>
<blockquote>
<p>“Deprecated” below means “deprecated in OS X version 10.5 for 32-bit code, and disallowed for 64-bit code.”</p>
</blockquote>
<p>下面的“过时的”代表的是32位机的OS X系统版本位10.5的 在64位机中不不允许使用的代码。</p>
<blockquote>
<p>Who Should Read This Document</p>
</blockquote>
<p>我们应该阅读下这个文档。</p>
<blockquote>
<p>The document is intended for readers who might be interested in learning about the Objective-C runtime.</p>
</blockquote>
<p>本文档是写给那些可能有兴趣学习Objective-C runtime运行时语言的读者的。</p>
<blockquote>
<p>Because this isn’t a document about C, it assumes some prior acquaintance with that language. However, it doesn’t have to be an extensive(大规模的) acquaintance（了解，熟知，熟悉）.<br>因为这不是一个C语言的文档，它假定了你对OC熟悉的基础。然而，他不一定是一个大规模熟知运行时的。</p>
<p>Symbols:符号<br>Working with Classes:使用的类</p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>Objective-C运行时定义了几种重要的类型。<br>Class：定义Objective-C类<br>Ivar：定义对象的实例变量，包括类型和名字。<br>Protocol：定义正式协议。<br>objc_property_t：定义属性。叫这个名字可能是为了防止和Objective-C1.0中的用户类型冲突，那时候还没有属性<br>Method：定义对象方法或类方法。这个类型提供了方法的名字（就是<strong>选择器</strong>）、参数数量和类型，以及返回值（这些信息合起来称为方法的<strong>签名</strong>），还有一个指向代码的函数指针（也就是方法的<strong>实现</strong>）。<br>SEL：定义选择器。选择器是方法名的唯一标识符。<br>IMP：定义方法实现。这只是一个指向某个函数的指针，该函数接受一个对象、一个选择器和一个可变长参数列表（varargs），返回一个对象</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Ivar  &amp;  property 区别</div><div class="line">@property = Ivar + setter + getter</div></pre></td></tr></table></figure>
</code></pre><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Working-with-classes"><a href="#Working-with-classes" class="headerlink" title="Working with classes"></a>Working with classes</h3><hr>
<h4 id="class-getName"><a href="#class-getName" class="headerlink" title="class_getName"></a>class_getName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class_getName</div><div class="line">Returns the name of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * class_getName(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">A class object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The name of the class, or the empty string if cls is Nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：返回一个class的名字</li>
<li>声明:<code>const char * class_getName(Class cls);</code></li>
<li>参数：cls:一个类对象</li>
<li>返回值：返回class名字，如果cls为空则返回空。</li>
</ul>
<h4 id="class-getSuperclass"><a href="#class-getSuperclass" class="headerlink" title="class_getSuperclass"></a>class_getSuperclass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class_getSuperclass</div><div class="line">Returns the superclass of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class class_getSuperclass(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">A class object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The superclass of the class, or Nil if cls is a root class, or Nil if cls is Nil.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You should usually use NSObject‘s superclass method instead of this function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：返回一个class的父类</li>
<li>声明:<code>Class class_getSuperclass(Class cls);</code></li>
<li>参数：cls:一个类对象</li>
<li>返回值：返回class的父类，如果cls为空则返回空，如果cls是元类（最基本的那个类，只有子类没有父类）也返回为空。</li>
</ul>
<blockquote>
<p>讨论：<br>我们经常使用的 <code>[obj superclass]</code>;其实就是这个方法。</p>
</blockquote>
<h4 id="class-setSuperclass-已经废弃，不推荐使用"><a href="#class-setSuperclass-已经废弃，不推荐使用" class="headerlink" title="class_setSuperclass (已经废弃，不推荐使用)"></a>class_setSuperclass (已经废弃，不推荐使用)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class_setSuperclass Deprecated</div><div class="line">Sets the superclass of a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class class_setSuperclass(Class cls, Class newSuper);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class whose superclass you want to set.</div><div class="line"></div><div class="line">newSuper</div><div class="line">The new superclass for cls.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The old superclass for cls.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You should not use this function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0-2.0 Deprecated</div><div class="line">macOS 10.5-10.5 Deprecated</div><div class="line">tvOS 2.0-9.0 Deprecated</div><div class="line">watchOS 2.0-1.0 Deprecated</div></pre></td></tr></table></figure>
<ul>
<li>用途：给一个类设置父类。</li>
<li>声明:<code>Class class_setSuperclass(Class cls, Class newSuper);</code></li>
<li>参数：<br><strong> cls: 一个class对象
</strong> newSuper: 新class对象</li>
<li>返回值：cls对象的旧父类。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class_isMetaClass</div><div class="line">Returns a Boolean value that indicates whether a class object is a metaclass.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_isMetaClass(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">A class object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if cls is a metaclass, NO if cls is a non-meta class, NO if cls is Nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<h4 id="class-isMetaClass"><a href="#class-isMetaClass" class="headerlink" title="class_isMetaClass"></a>class_isMetaClass</h4><ul>
<li>用途：返回一个布尔值，判断一个class对象是否元类</li>
<li>声明:<code>BOOL class_isMetaClass(Class cls);</code></li>
<li>参数：一个类对象 </li>
<li>返回值：YES代表是一个元类；NO 不是元类或者cls为Nil</li>
</ul>
<h4 id="class-getInstanceSize"><a href="#class-getInstanceSize" class="headerlink" title="class_getInstanceSize"></a>class_getInstanceSize</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class_getInstanceSize</div><div class="line">Returns the size of instances of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">size_t class_getInstanceSize(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">A class object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The size in bytes of instances of the class cls, or 0 if cls is Nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：返回一个类的实例对象的size</li>
<li>声明:<code>size_t class_getInstanceSize(Class cls);</code></li>
<li>参数：一个类对象</li>
<li></li>
<li>返回值：返回以比特为单位的 class的实例对象的 大小，如果cls（类对象）为Nil,返回0；</li>
</ul>
<h4 id="class-getInstanceVariable"><a href="#class-getInstanceVariable" class="headerlink" title="class_getInstanceVariable"></a>class_getInstanceVariable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class_getInstanceVariable</div><div class="line">Returns the Ivar for a specified instance variable of a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Ivar class_getInstanceVariable(Class cls, const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class whose instance variable you wish to obtain.</div><div class="line"></div><div class="line">name</div><div class="line">The name of the instance variable definition to obtain.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer to an Ivar data structure containing information about the instance variable specified by name.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：给一个class返回一个指定的 <em>实例变量</em></li>
<li>声明:<code>Ivar class_getInstanceVariable(Class cls, const char *name);</code></li>
<li>参数：<br><strong> cls: 你希望获得实例变量的那个<code>class</code>
</strong> name: 你希望获得的实例变量的名字</li>
<li>返回值：包含指定名称的实例变量信息的 数据结构的 指针。</li>
</ul>
<h4 id="class-getClassVariable"><a href="#class-getClassVariable" class="headerlink" title="class_getClassVariable"></a>class_getClassVariable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class_getClassVariable</div><div class="line">Returns the Ivar for a specified class variable of a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Ivar class_getClassVariable(Class cls, const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class definition whose class variable you wish to obtain.</div><div class="line"></div><div class="line">name</div><div class="line">The name of the class variable definition to obtain.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer to an Ivar data structure containing information about the class variable specified by name.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：给一个class返回一个<em>类变量*</em></li>
<li>声明:<code>Ivar class_getClassVariable(Class cls, const char *name);</code></li>
<li>参数：<br><strong> cls 你希望获得的类变量的类定义
</strong> name 要获得的类变量定义的名称</li>
<li>返回值：包含指定类变量信息的 指向数据结构的指针。</li>
</ul>
<h4 id="class-addIvar"><a href="#class-addIvar" class="headerlink" title="class_addIvar"></a>class_addIvar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class_addIvar</div><div class="line">Adds a new instance variable to a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types);</div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if the instance variable was added successfully, otherwise NO (for example, the class already contains an instance variable with that name).</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function may only be called after objc_allocateClassPair and before objc_registerClassPair. Adding an instance variable to an existing class is not supported.</div><div class="line"></div><div class="line">The class must not be a metaclass. Adding an instance variable to a metaclass is not supported.</div><div class="line"></div><div class="line">The instance variable&apos;s minimum alignment in bytes is 1&lt;&lt;align. The minimum alignment of an instance variable depends on the ivar&apos;s type and the machine architecture. For variables of any pointer type, pass log2(sizeof(pointer_type)).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：将实例变量添加到class中</li>
<li>声明:<code>BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types);</code></li>
<li>参数：是否添加成功<br><strong> cls: 类对象
</strong> name: 类名<br>** 额外空间</li>
<li>返回值：</li>
</ul>
<blockquote>
<p>注意：<br>这个方法只能在 objc_allocateClassPair 和 before objc_registerClassPair之后执行.不支持现有的类添加实例变量。</p>
</blockquote>
<h4 id="class-copyIvarList"><a href="#class-copyIvarList" class="headerlink" title="class_copyIvarList"></a>class_copyIvarList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class_copyIvarList</div><div class="line">Describes the instance variables declared by a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Ivar * class_copyIvarList(Class cls, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to inspect.</div><div class="line"></div><div class="line">outCount</div><div class="line">On return, contains the length of the returned array. If outCount is NULL, the length is not returned.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of pointers of type Ivar describing the instance variables declared by the class. Any instance variables declared by superclasses are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().</div><div class="line"></div><div class="line">If the class declares no instance variables, or cls is Nil, NULL is returned and *outCount is 0.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：获取指定class的实例变量列表。</li>
<li>声明:<code>Ivar * class_copyIvarList(Class cls, unsigned int *outCount);</code></li>
<li>参数：<br><strong> cls: 一个类对象
</strong> outCount: 返回时，包含返回数组的长度。如果outcount为空，长度不返回。</li>
<li>返回值：- 在类中声明的类型，描述实例变量的指针数组。任何实例变量声明的类中不包括。该数组包含* outcount指针跟着一个null。你必须自由的阵列free()。- </li>
</ul>
<h4 id="class-getIvarLayout"><a href="#class-getIvarLayout" class="headerlink" title="class_getIvarLayout"></a>class_getIvarLayout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class_getIvarLayout</div><div class="line">Returns a description of the Ivar layout for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const uint8_t * class_getIvarLayout(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A description of the Ivar layout for cls.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：返回一个给定class的类型描述 </li>
<li>声明:<code>const uint8_t * class_getIvarLayout(Class cls);</code></li>
<li>参数：<br>** cls :类型描述</li>
<li>返回值：一个类的实例变量的描述</li>
</ul>
<h4 id="class-setIvarLayout"><a href="#class-setIvarLayout" class="headerlink" title="class_setIvarLayout"></a>class_setIvarLayout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class_setIvarLayout</div><div class="line">Sets the Ivar layout for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void class_setIvarLayout(Class cls, const uint8_t *layout);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to modify.</div><div class="line"></div><div class="line">layout</div><div class="line">The layout of the Ivars for cls.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：设置指定类的实例变量的描述（类型？）（给一个类的实例变量，指定数据类型？）</li>
<li>声明:<code>void class_setIvarLayout(Class cls, const uint8_t *layout);</code></li>
<li>参数：<br><strong> 指定类
</strong> 指定类的实例变量的 类型描述（指定的数据类型）</li>
<li>返回值：void</li>
</ul>
<h4 id="class-getWeakIvarLayout"><a href="#class-getWeakIvarLayout" class="headerlink" title="class_getWeakIvarLayout"></a>class_getWeakIvarLayout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class_getWeakIvarLayout</div><div class="line">Returns a description of the layout of weak Ivars for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const uint8_t * class_getWeakIvarLayout(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A description of the layout of the weak Ivars for cls.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：获取指定类的 weak 类型的实例变量的类型描述（数据类型）</li>
<li>声明:<code>const uint8_t * class_getWeakIvarLayout(Class cls);</code></li>
<li>参数：<br>** cls : 类型描述（数据类型）</li>
<li>返回值：指定类的weak类型的实例变量的类型描述</li>
</ul>
<h4 id="class-setWeakIvarLayout"><a href="#class-setWeakIvarLayout" class="headerlink" title="class_setWeakIvarLayout"></a>class_setWeakIvarLayout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class_setWeakIvarLayout</div><div class="line">Sets the layout for weak Ivars for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void class_setWeakIvarLayout(Class cls, const uint8_t *layout);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to modify.</div><div class="line"></div><div class="line">layout</div><div class="line">The layout of the weak Ivars for cls.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：给指定类的weak类型的实例变量设置描述类型（数据类型）</li>
<li>声明:<code>void class_setWeakIvarLayout(Class cls, const uint8_t *layout);</code></li>
<li>参数：<br><strong> cls : 修饰类（描述类）
</strong> layout : 指定类的weak实例变量的类型描述</li>
<li>返回值：void</li>
</ul>
<h4 id="class-getProperty"><a href="#class-getProperty" class="headerlink" title="class_getProperty"></a>class_getProperty</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class_getProperty</div><div class="line">Returns a property with a given name of a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">objc_property_t class_getProperty(Class cls, const char *name);</div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer of type objc_property_t describing the property, or NULL if the class does not declare a property with that name, or NULL if cls is Nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：返回指定类的指定名字的属性</li>
<li>声明:<code>objc_property_t class_getProperty(Class cls, const char *name);</code></li>
<li>参数：<br><strong> cls 指定的类
</strong> 属性名</li>
<li>返回值：返回一个 objc_property_t 类型的属性描述类型指针（如果class为空,或者指定类内未声明该名字的属性也返回Nil）</li>
</ul>
<h4 id="class-copyPropertyList"><a href="#class-copyPropertyList" class="headerlink" title="class_copyPropertyList"></a>class_copyPropertyList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class_copyPropertyList</div><div class="line">Describes the properties declared by a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">objc_property_t * class_copyPropertyList(Class cls, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">outCount</div><div class="line">On return, contains the length of the returned array. If outCount is NULL, the length is not returned.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of pointers of type objc_property_t describing the properties declared by the class. Any properties declared by superclasses are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().</div><div class="line"></div><div class="line">If cls declares no properties, or cls is Nil, returns NULL and *outCount is 0.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：描述class声明的属性</li>
<li>声明:<code>objc_property_t * class_copyPropertyList(Class cls, unsigned int *outCount);</code></li>
<li>参数：<br><strong> cls 你想要描述的那个class
</strong> 在返回值里包含的返回数组的长度，outCount 是NULL，返回值不包含长度。</li>
<li>返回值：返回一个objc_property_t修饰的 指定class的声明的属性的数组（返回一个属性数组，数组类型是objc_property_t）</li>
</ul>
<h4 id="class-addMethod"><a href="#class-addMethod" class="headerlink" title="class_addMethod"></a>class_addMethod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">class_addMethod</div><div class="line">Adds a new method to a class with a given name and implementation.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to which to add a method.</div><div class="line"></div><div class="line">name</div><div class="line">A selector that specifies the name of the method being added.</div><div class="line"></div><div class="line">imp</div><div class="line">A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.</div><div class="line"></div><div class="line">types</div><div class="line">An array of characters that describe the types of the arguments to the method. For possible values, see Objective-C Runtime Programming Guide &gt; Type Encodings. Since the function must take at least two arguments—self and _cmd, the second and third characters must be “@:” (the first character is the return type).</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if the method was added successfully, otherwise NO (for example, the class already contains a method implementation with that name).</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">class_addMethod will add an override of a superclass&apos;s implementation, but will not replace an existing implementation in this class. To change an existing implementation, use method_setImplementation.</div><div class="line"></div><div class="line">An Objective-C method is simply a C function that take at least two arguments—self and _cmd. For example, given the following function:</div><div class="line"></div><div class="line">void myMethodIMP(id self, SEL _cmd)</div><div class="line">&#123;</div><div class="line">    // implementation ....</div><div class="line">&#125;</div><div class="line">you can dynamically add it to a class as a method (called resolveThisMethodDynamically) like this:</div><div class="line"></div><div class="line">class_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, &quot;v@:&quot;);</div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：给指定的类 用 1、方法名 和 2、方法实现 添加一个方法</li>
<li>声明:<code>BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types);</code></li>
<li>参数：<br><strong> cls : 指定的那个类
</strong> SEL: 方法名的ID<br><strong> IMP：定义方法实现。这只是一个指向某个函数的指针，该函数接受一个对象、一个选择器和一个可变长参数列表（varargs），返回一个对象
</strong> 描述方法参数类型的字符数组。可能的值，看Objective-C编程指南&gt;类型编码。因为函数必须至少有两个参数自_cmd，第二和第三个字符必须“@”（第一个字是返回类型）。</li>
<li>返回值：如果方法添加成功YES；否则 NO（例如：IMP方法已经存在在该类内）</li>
<li>讨论：该方法只能覆盖父类中的IMP，但不能替换该类自身的方法实现IMP。</li>
</ul>
<h4 id="class-getInstanceMethod"><a href="#class-getInstanceMethod" class="headerlink" title="class_getInstanceMethod"></a>class_getInstanceMethod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class_getInstanceMethod</div><div class="line">Returns a specified instance method for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Method class_getInstanceMethod(Class cls, SEL name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">aClass</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">aSelector</div><div class="line">The selector of the method you want to retrieve.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The method that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain an instance method with the specified selector.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">Note that this function searches superclasses for implementations, whereas class_copyMethodList does not.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：获取指定class的实例方法</li>
<li>声明:<code>Method class_getInstanceMethod(Class cls, SEL name);</code></li>
<li>参数：<br><strong> cls ：指定的类
</strong> SEL：定义选择器。选择器是方法名的唯一标识符。</li>
<li>返回值：对应于所指定的一aselector类选择器的实现方法，或null如果指定的类或其超类不包含具有指定选择器实例方法。(返回一个选择器指定的方法的实现，该类以及其父类不包含该方法 则返回空)</li>
</ul>
<h4 id="class-getClassMethod"><a href="#class-getClassMethod" class="headerlink" title="class_getClassMethod"></a>class_getClassMethod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class_getClassMethod</div><div class="line">Returns a pointer to the data structure describing a given class method for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Method class_getClassMethod(Class cls, SEL name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">aClass</div><div class="line">A pointer to a class definition. Pass the class that contains the method you want to retrieve.</div><div class="line"></div><div class="line">aSelector</div><div class="line">A pointer of type SEL. Pass the selector of the method you want to retrieve.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer to the Method data structure that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain a class method with the specified selector.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">Note that this function searches superclasses for implementations, whereas class_copyMethodList does not.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：返回一个指定类的 指定方法 的 数据类型（数据结构描述）的指针</li>
<li>声明:<code>Method class_getClassMethod(Class cls, SEL name);</code></li>
<li>参数：<br><strong> cls:指定类
</strong> SEL:定义选择器。选择器是方法名的唯一标识符。</li>
<li>返回值：一个指向方法的数据结构，对应于指定的aselector指定的一类选择器的实现，或null如果指定的类或其超类不包含具有指定选择器类的方法。(一个指向方法实现的数据类型，)</li>
</ul>
<h4 id="class-copyMethodList"><a href="#class-copyMethodList" class="headerlink" title="class_copyMethodList"></a>class_copyMethodList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class_copyMethodList</div><div class="line">Describes the instance methods implemented by a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Method * class_copyMethodList(Class cls, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">outCount</div><div class="line">On return, contains the length of the returned array. If outCount is NULL, the length is not returned.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of pointers of type Method describing the instance methods implemented by the class—any instance methods implemented by superclasses are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().</div><div class="line"></div><div class="line">If cls implements no instance methods, or cls is Nil, returns NULL and *outCount is 0.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">To get the class methods of a class, use class_copyMethodList(object_getClass(cls), &amp;count).</div><div class="line"></div><div class="line">To get the implementations of methods that may be implemented by superclasses, use class_getInstanceMethod or class_getClassMethod.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：描述  类实现的实例方法</li>
<li>声明:<code>Method * class_copyMethodList(Class cls, unsigned int *outCount);</code></li>
<li>参数：<br><strong> cls:指定类
</strong> outCount:方法的个数</li>
<li>返回值：返回一个数组，数组内是该class内实例方法实现的指针，不包含，父类的方法实现。</li>
</ul>
<h4 id="class-replaceMethod"><a href="#class-replaceMethod" class="headerlink" title="class_replaceMethod"></a>class_replaceMethod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class_replaceMethod</div><div class="line">Replaces the implementation of a method for a given class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to modify.</div><div class="line"></div><div class="line">name</div><div class="line">A selector that identifies the method whose implementation you want to replace.</div><div class="line"></div><div class="line">imp</div><div class="line">The new implementation for the method identified by name for the class identified by cls.</div><div class="line"></div><div class="line">types</div><div class="line">An array of characters that describe the types of the arguments to the method. For possible values, see Objective-C Runtime Programming Guide &gt; Type Encodings. Since the function must take at least two arguments—self and _cmd, the second and third characters must be “@:” (the first character is the return type).</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The previous implementation of the method identified by name for the class identified by cls.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function behaves in two different ways:</div><div class="line"></div><div class="line">If the method identified by name does not yet exist, it is added as if class_addMethod were called. The type encoding specified by types is used as given.</div><div class="line"></div><div class="line">If the method identified by name does exist, its IMP is replaced as if method_setImplementation were called. The type encoding specified by types is ignored.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：替换指定类内的指定方法实现</li>
<li>声明:<code>IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types);</code></li>
<li>参数：<br><strong> cls:指定类
</strong> SEL:定义选择器。选择器是方法名的唯一标识符。<br><strong> IMP:新的方法实现
</strong> types:描述方法参数类型的字符数组。可能的值，看Objective-C编程指南&gt;类型编码。因为函数必须至少有两个参数自_cmd，第二和第三个字符必须“@”（第一个字是返回类型）。</li>
<li>返回值：旧的被替换的方法实现。</li>
</ul>
<h4 id="class-getMethodImplementation"><a href="#class-getMethodImplementation" class="headerlink" title="class_getMethodImplementation"></a>class_getMethodImplementation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class_getMethodImplementation</div><div class="line">Returns the function pointer that would be called if a particular message were sent to an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">IMP class_getMethodImplementation(Class cls, SEL name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">name</div><div class="line">A selector.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The function pointer that would be called if [object name] were called with an instance of the class, or NULL if cls is Nil.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">class_getMethodImplementation may be faster than method_getImplementation(class_getInstanceMethod(cls, name)).</div><div class="line"></div><div class="line">The function pointer returned may be a function internal to the runtime instead of an actual method implementation. For example, if instances of the class do not respond to the selector, the function pointer returned will be part of the runtime&apos;s message forwarding machinery.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-getMethodImplementation-stret"><a href="#class-getMethodImplementation-stret" class="headerlink" title="class_getMethodImplementation_stret"></a>class_getMethodImplementation_stret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class_getMethodImplementation_stret</div><div class="line">Returns the function pointer that would be called if a particular message were sent to an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">IMP class_getMethodImplementation_stret(Class cls, SEL name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">name</div><div class="line">A selector.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The function pointer that would be called if [object name] were called with an instance of the class, or NULL if cls is Nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-respondsToSelector"><a href="#class-respondsToSelector" class="headerlink" title="class_respondsToSelector"></a>class_respondsToSelector</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class_respondsToSelector</div><div class="line">Returns a Boolean value that indicates whether instances of a class respond to a particular selector.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_respondsToSelector(Class cls, SEL sel);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">sel</div><div class="line">A selector.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if instances of the class respond to the selector, otherwise NO.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You should usually use NSObject&apos;s respondsToSelector: or instancesRespondToSelector: methods instead of this function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-addProtocol"><a href="#class-addProtocol" class="headerlink" title="class_addProtocol"></a>class_addProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class_addProtocol</div><div class="line">Adds a protocol to a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_addProtocol(Class cls, Protocol *protocol);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to modify.</div><div class="line"></div><div class="line">outCount</div><div class="line">The protocol to add to cls.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if the protocol was added successfully, otherwise NO (for example, the class already conforms to that protocol).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-addProperty"><a href="#class-addProperty" class="headerlink" title="class_addProperty"></a>class_addProperty</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class_addProperty</div><div class="line">Adds a property to a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_addProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to modify.</div><div class="line"></div><div class="line">name</div><div class="line">The name of the property.</div><div class="line"></div><div class="line">attributes</div><div class="line">An array of property attributes.</div><div class="line"></div><div class="line">attributeCount</div><div class="line">The number of attributes in attributes.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if the property was added successfully; otherwise NO (for example, this function returns NO if the class already has that property).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">class_replaceProperty</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-replaceProperty"><a href="#class-replaceProperty" class="headerlink" title="class_replaceProperty"></a>class_replaceProperty</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class_replaceProperty</div><div class="line">Replace a property of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void class_replaceProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to modify.</div><div class="line"></div><div class="line">name</div><div class="line">The name of the property.</div><div class="line"></div><div class="line">attributes</div><div class="line">An array of property attributes.</div><div class="line"></div><div class="line">attributeCount</div><div class="line">The number of attributes in attributes.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">class_addProperty</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-conformsToProtocol"><a href="#class-conformsToProtocol" class="headerlink" title="class_conformsToProtocol"></a>class_conformsToProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class_conformsToProtocol</div><div class="line">Returns a Boolean value that indicates whether a class conforms to a given protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL class_conformsToProtocol(Class cls, Protocol *protocol);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">protocol</div><div class="line">A protocol.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if cls conforms to protocol, otherwise NO.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You should usually use NSObject‘s conformsToProtocol: method instead of this function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-copyProtocolList"><a href="#class-copyProtocolList" class="headerlink" title="class_copyProtocolList"></a>class_copyProtocolList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class_copyProtocolList</div><div class="line">Describes the protocols adopted by a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Protocol ** class_copyProtocolList(Class cls, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to inspect.</div><div class="line"></div><div class="line">outCount</div><div class="line">On return, contains the length of the returned array. If outCount is NULL, the length is not returned.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of pointers of type Protocol* describing the protocols adopted by the class. Any protocols adopted by superclasses or other protocols are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().</div><div class="line"></div><div class="line">If cls adopts no protocols, or cls is Nil, returns NULL and *outCount is 0.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-getVersion"><a href="#class-getVersion" class="headerlink" title="class_getVersion"></a>class_getVersion</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class_getVersion</div><div class="line">Returns the version number of a class definition.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">int class_getVersion(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">theClass</div><div class="line">A pointer to an Class data structure. Pass the class definition for which you wish to obtain the version.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An integer indicating the version number of the class definition.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You can use the version number of the class definition to provide versioning of the interface that your class represents to other classes. This is especially useful for object serialization (that is, archiving of the object in a flattened form), where it is important to recognize changes to the layout of the instance variables in different class-definition versions.</div><div class="line"></div><div class="line">Classes derived from the Foundation framework NSObject class can obtain the class-definition version number using the getVersion class method, which is implemented using the class_getVersion function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-setVersion"><a href="#class-setVersion" class="headerlink" title="class_setVersion"></a>class_setVersion</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class_setVersion</div><div class="line">Sets the version number of a class definition.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void class_setVersion(Class cls, int version);</div><div class="line">Parameters</div><div class="line"></div><div class="line">theClass</div><div class="line">A pointer to an Class data structure. Pass the class definition for which you wish to set the version.</div><div class="line"></div><div class="line">version</div><div class="line">An integer. Pass the new version number of the class definition.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You can use the version number of the class definition to provide versioning of the interface that your class represents to other classes. This is especially useful for object serialization (that is, archiving of the object in a flattened form), where it is important to recognize changes to the layout of the instance variables in different class-definition versions.</div><div class="line"></div><div class="line">Classes derived from the Foundation framework NSObject class can set the class-definition version number using the setVersion: class method, which is implemented using the class_setVersion function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-getFutureClass"><a href="#objc-getFutureClass" class="headerlink" title="objc_getFutureClass"></a>objc_getFutureClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">objc_getFutureClass</div><div class="line">Used by CoreFoundation&apos;s toll-free bridging.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class objc_getFutureClass(const char *name);</div><div class="line">Discussion</div><div class="line"></div><div class="line">Do not call this function yourself.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-setFutureClass"><a href="#objc-setFutureClass" class="headerlink" title="objc_setFutureClass"></a>objc_setFutureClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">objc_setFutureClass</div><div class="line">Used by CoreFoundation&apos;s toll-free bridging.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_setFutureClass (</div><div class="line">   Class cls,</div><div class="line">   const char *name</div><div class="line">);</div><div class="line">Discussion</div><div class="line"></div><div class="line">Do not call this function yourself.</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Adding-Classes"><a href="#Adding-Classes" class="headerlink" title="Adding Classes"></a>Adding Classes</h3><hr>
<h4 id="objc-allocateClassPair"><a href="#objc-allocateClassPair" class="headerlink" title="objc_allocateClassPair"></a>objc_allocateClassPair</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">objc_allocateClassPair</div><div class="line">Creates a new class and metaclass.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes);</div><div class="line">Parameters</div><div class="line"></div><div class="line">superclass</div><div class="line">The class to use as the new class&apos;s superclass, or Nil to create a new root class.</div><div class="line"></div><div class="line">name</div><div class="line">The string to use as the new class&apos;s name. The string will be copied.</div><div class="line"></div><div class="line">extraBytes</div><div class="line">The number of bytes to allocate for indexed ivars at the end of the class and metaclass objects. This should usually be 0.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The new class, or Nil if the class could not be created (for example, the desired name is already in use).</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You can get a pointer to the new metaclass by calling object_getClass(newClass).</div><div class="line"></div><div class="line">To create a new class, start by calling objc_allocateClassPair. Then set the class&apos;s attributes with functions like class_addMethod and class_addIvar. When you are done building the class, call objc_registerClassPair. The new class is now ready for use.</div><div class="line"></div><div class="line">Instance methods and instance variables should be added to the class itself. Class methods should be added to the metaclass.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_disposeClassPair</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-disposeClassPair"><a href="#objc-disposeClassPair" class="headerlink" title="objc_disposeClassPair"></a>objc_disposeClassPair</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">objc_disposeClassPair</div><div class="line">Destroys a class and its associated metaclass.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_disposeClassPair(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class to be destroyed. This class must have been allocated using objc_allocateClassPair.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">Do not call this function if instances of the cls class or any subclass exist.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-registerClassPair"><a href="#objc-registerClassPair" class="headerlink" title="objc_registerClassPair"></a>objc_registerClassPair</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">objc_registerClassPair</div><div class="line">Registers a class that was allocated using objc_allocateClassPair.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_registerClassPair(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you want to register.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-duplicateClass"><a href="#objc-duplicateClass" class="headerlink" title="objc_duplicateClass"></a>objc_duplicateClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">objc_duplicateClass</div><div class="line">Used by Foundation&apos;s Key-Value Observing.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class objc_duplicateClass(Class original, const char *name, size_t extraBytes);</div><div class="line">Discussion</div><div class="line"></div><div class="line">Do not call this function yourself.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Instantiating-Classes"><a href="#Instantiating-Classes" class="headerlink" title="Instantiating Classes"></a>Instantiating Classes</h3><hr>
<h4 id="class-createInstance"><a href="#class-createInstance" class="headerlink" title="class_createInstance"></a>class_createInstance</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class_createInstance</div><div class="line">Creates an instance of a class, allocating memory for the class in the default malloc memory zone.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id class_createInstance(Class cls, size_t extraBytes);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class that you want to allocate an instance of.</div><div class="line"></div><div class="line">extraBytes</div><div class="line">An integer indicating the number of extra bytes to allocate. The additional bytes can be used to store additional instance variables beyond those defined in the class definition.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An instance of the class cls.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_constructInstance</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-constructInstance"><a href="#objc-constructInstance" class="headerlink" title="objc_constructInstance"></a>objc_constructInstance</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">objc_constructInstance</div><div class="line">Creates an instance of a class at the specified location.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_constructInstance(Class cls, void *bytes);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class that you want to allocate an instance of.</div><div class="line"></div><div class="line">bytes</div><div class="line">The location at which to allocate an instance of the cls class. bytes myst point to at least class_getInstanceSize(cls) bytes of well-aligned, zero-filled memory.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An instance of the class cls at bytes, if successful; otherwise nil (for example, if cls or bytes are themselves nil).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 3.0+</div><div class="line">macOS 10.6+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">class_createInstance</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-destructInstance"><a href="#objc-destructInstance" class="headerlink" title="objc_destructInstance"></a>objc_destructInstance</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">objc_destructInstance</div><div class="line">Destroys an instance of a class without freeing memory and removes any of its associated references.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void * objc_destructInstance(id obj);</div><div class="line">Discussion</div><div class="line"></div><div class="line">This method does nothing if obj is nil.</div><div class="line"></div><div class="line">Important</div><div class="line"></div><div class="line">The garbage collector does not call this function. As a result, if you edit this function, you should also edit finalize. That said, Core Foundation and other clients do call this function under garbage collection.</div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 3.0+</div><div class="line">macOS 10.6+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_constructInstance</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Instances"><a href="#Working-with-Instances" class="headerlink" title="Working with Instances"></a>Working with Instances</h3><hr>
<h4 id="object-copy"><a href="#object-copy" class="headerlink" title="object_copy"></a>object_copy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">object_copy</div><div class="line">Returns a copy of a given object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id object_copy(id obj, size_t size);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">An Objective-C object.</div><div class="line"></div><div class="line">size</div><div class="line">The size of the object obj.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A copy of obj.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-dispose"><a href="#object-dispose" class="headerlink" title="object_dispose"></a>object_dispose</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">object_dispose</div><div class="line">Frees the memory occupied by a given object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id object_dispose(id obj);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">An Objective-C object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-setInstanceVariable"><a href="#object-setInstanceVariable" class="headerlink" title="object_setInstanceVariable"></a>object_setInstanceVariable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">object_setInstanceVariable</div><div class="line">Changes the value of an instance variable of a class instance.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Ivar object_setInstanceVariable(id obj, const char *name, void *value);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">A pointer to an instance of a class. Pass the object containing the instance variable whose value you wish to modify.</div><div class="line"></div><div class="line">name</div><div class="line">A C string. Pass the name of the instance variable whose value you wish to modify.</div><div class="line"></div><div class="line">value</div><div class="line">The new value for the instance variable.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer to the Ivar data structure that defines the type and name of the instance variable specified by name.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-getInstanceVariable"><a href="#object-getInstanceVariable" class="headerlink" title="object_getInstanceVariable"></a>object_getInstanceVariable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">object_getInstanceVariable</div><div class="line">Obtains the value of an instance variable of a class instance.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Ivar object_getInstanceVariable(id obj, const char *name, void **outValue);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">A pointer to an instance of a class. Pass the object containing the instance variable whose value you wish to obtain.</div><div class="line"></div><div class="line">name</div><div class="line">A C string. Pass the name of the instance variable whose value you wish to obtain.</div><div class="line"></div><div class="line">outValue</div><div class="line">On return, contains a pointer to the value of the instance variable.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer to the Ivar data structure that defines the type and name of the instance variable specified by name.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-getIndexedIvars"><a href="#object-getIndexedIvars" class="headerlink" title="object_getIndexedIvars"></a>object_getIndexedIvars</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">object_getIndexedIvars</div><div class="line">Returns a pointer to any extra bytes allocated with a instance given object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void * object_getIndexedIvars(id obj);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">An Objective-C object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer to any extra bytes allocated with obj. If obj was not allocated with any extra bytes, then dereferencing the returned pointer is undefined.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function returns a pointer to any extra bytes allocated with the instance (as specified by class_createInstance with extraBytes&gt;0). This memory follows the object&apos;s ordinary ivars, but may not be adjacent to the last ivar.</div><div class="line"></div><div class="line">The returned pointer is guaranteed to be pointer-size aligned, even if the area following the object&apos;s last ivar is less aligned than that. Alignment greater than pointer-size is never guaranteed, even if the area following the object&apos;s last ivar is more aligned than that.</div><div class="line"></div><div class="line">In a garbage-collected environment, the memory is scanned conservatively.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-getIvar"><a href="#object-getIvar" class="headerlink" title="object_getIvar"></a>object_getIvar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">object_getIvar</div><div class="line">Reads the value of an instance variable in an object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id object_getIvar(id obj, Ivar ivar);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">The object containing the instance variable whose value you want to read.</div><div class="line"></div><div class="line">ivar</div><div class="line">The Ivar describing the instance variable whose value you want to read.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The value of the instance variable specified by ivar, or nil if object is nil.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">object_getIvar is faster than object_getInstanceVariable if the Ivar for the instance variable is already known.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-setIvar"><a href="#object-setIvar" class="headerlink" title="object_setIvar"></a>object_setIvar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">object_setIvar</div><div class="line">Sets the value of an instance variable in an object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void object_setIvar(id obj, Ivar ivar, id value);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">The object containing the instance variable whose value you want to set.</div><div class="line"></div><div class="line">ivar</div><div class="line">The Ivar describing the instance variable whose value you want to set.</div><div class="line"></div><div class="line">value</div><div class="line">The new value for the instance variable.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">object_setIvar is faster than object_setInstanceVariable if the Ivar for the instance variable is already known.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-getClassName"><a href="#object-getClassName" class="headerlink" title="object_getClassName"></a>object_getClassName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">object_getClassName</div><div class="line">Returns the class name of a given object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * object_getClassName(id obj);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">An Objective-C object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The name of the class of which obj is an instance.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-getClass"><a href="#object-getClass" class="headerlink" title="object_getClass"></a>object_getClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">object_getClass</div><div class="line">Returns the class of an object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class object_getClass(id obj);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">The object you want to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The class object of which object is an instance, or Nil if object is nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="object-setClass"><a href="#object-setClass" class="headerlink" title="object_setClass"></a>object_setClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">object_setClass</div><div class="line">Sets the class of an object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class object_setClass(id obj, Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">The object to modify.</div><div class="line"></div><div class="line">sel</div><div class="line">A class object.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The previous value of object‘s class, or Nil if object is nil.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Obtaining-Class-Definitions"><a href="#Obtaining-Class-Definitions" class="headerlink" title="Obtaining Class Definitions"></a>Obtaining Class Definitions</h3><hr>
<h4 id="objc-getClassList"><a href="#objc-getClassList" class="headerlink" title="objc_getClassList"></a>objc_getClassList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">objc_getClassList</div><div class="line">Obtains the list of registered class definitions.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">int objc_getClassList(Class *buffer, int bufferCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">buffer</div><div class="line">An array of Class values. On output, each Class value points to one class definition, up to either bufferLen or the total number of registered classes, whichever is less. You can pass NULL to obtain the total number of registered class definitions without actually retrieving any class definitions.</div><div class="line"></div><div class="line">bufferLen</div><div class="line">An integer value. Pass the number of pointers for which you have allocated space in buffer. On return, this function fills in only this number of elements. If this number is less than the number of registered classes, this function returns an arbitrary subset of the registered classes.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An integer value indicating the total number of registered classes.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The Objective-C runtime library automatically registers all the classes defined in your source code. You can create class definitions at runtime and register them with the objc_addClass function.</div><div class="line"></div><div class="line">Listing 1 demonstrates how to use this function to retrieve all the class definitions that have been registered with the Objective-C runtime in the current process.</div><div class="line"></div><div class="line">Listing 1</div><div class="line">Using objc_getClassList</div><div class="line">int numClasses;</div><div class="line">Class * classes = NULL;</div><div class="line">classes = NULL;</div><div class="line">numClasses = objc_getClassList(NULL, 0);</div><div class="line">if (numClasses &gt; 0 )</div><div class="line">&#123;</div><div class="line">    classes = malloc(sizeof(Class) * numClasses);</div><div class="line">    numClasses = objc_getClassList(classes, numClasses);</div><div class="line">    free(classes);</div><div class="line">&#125;</div><div class="line">Special Considerations</div><div class="line"></div><div class="line">You cannot assume that class objects you get from this function are classes that inherit from NSObject, so you cannot safely call any methods on such classes without detecting that the method is implemented first.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-copyClassList"><a href="#objc-copyClassList" class="headerlink" title="objc_copyClassList"></a>objc_copyClassList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">objc_copyClassList</div><div class="line">Creates and returns a list of pointers to all registered class definitions.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class * objc_copyClassList(unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">outCount</div><div class="line">An integer pointer used to store the number of classes returned by this function in the list. This parameter may be nil.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A nil terminated array of classes. You must free the array with free().</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 3.1+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_getClassList</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-lookUpClass"><a href="#objc-lookUpClass" class="headerlink" title="objc_lookUpClass"></a>objc_lookUpClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">objc_lookUpClass</div><div class="line">Returns the class definition of a specified class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class objc_lookUpClass(const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">name</div><div class="line">The name of the class to look up.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The Class object for the named class, or nil if the class is not registered with the Objective-C runtime.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">objc_getClass is different from this function in that if the class is not registered, objc_getClass calls the class handler callback and then checks a second time to see whether the class is registered. This function does not call the class handler callback.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-getClass"><a href="#objc-getClass" class="headerlink" title="objc_getClass"></a>objc_getClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">objc_getClass</div><div class="line">Returns the class definition of a specified class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_getClass(const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">name</div><div class="line">The name of the class to look up.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The Class object for the named class, or nil if the class is not registered with the Objective-C runtime.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">objc_getClass is different from objc_lookUpClass in that if the class is not registered, objc_getClass calls the class handler callback and then checks a second time to see whether the class is registered. objc_lookUpClass does not call the class handler callback.</div><div class="line"></div><div class="line">Special Considerations</div><div class="line"></div><div class="line">Earlier implementations of this function (prior to OS X v10.0) terminate the program if the class does not exist.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-getRequiredClass"><a href="#objc-getRequiredClass" class="headerlink" title="objc_getRequiredClass"></a>objc_getRequiredClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">objc_getRequiredClass</div><div class="line">Returns the class definition of a specified class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Class objc_getRequiredClass(const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">name</div><div class="line">The name of the class to look up.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The Class object for the named class.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function is the same as objc_getClass, but kills the process if the class is not found.</div><div class="line"></div><div class="line">This function is used by ZeroLink, where failing to find a class would be a compile-time link error without ZeroLink.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-getMetaClass"><a href="#objc-getMetaClass" class="headerlink" title="objc_getMetaClass"></a>objc_getMetaClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">objc_getMetaClass</div><div class="line">Returns the metaclass definition of a specified class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_getMetaClass(const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">name</div><div class="line">The name of the class to look up.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The Class object for the metaclass of the named class, or nil if the class is not registered with the Objective-C runtime.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">If the definition for the named class is not registered, this function calls the class handler callback and then checks a second time to see if the class is registered. However, every class definition must have a valid metaclass definition, and so the metaclass definition is always returned, whether it’s valid or not.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Instance-Variables"><a href="#Working-with-Instance-Variables" class="headerlink" title="Working with Instance Variables"></a>Working with Instance Variables</h3><hr>
<h4 id="ivar-getName"><a href="#ivar-getName" class="headerlink" title="ivar_getName"></a>ivar_getName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ivar_getName</div><div class="line">Returns the name of an instance variable.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * ivar_getName(Ivar v);</div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string containing the instance variable&apos;s name.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="ivar-getTypeEncoding"><a href="#ivar-getTypeEncoding" class="headerlink" title="ivar_getTypeEncoding"></a>ivar_getTypeEncoding</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ivar_getTypeEncoding</div><div class="line">Returns the type string of an instance variable.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * ivar_getTypeEncoding(Ivar v);</div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string containing the instance variable&apos;s type encoding.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">For possible values, see Objective-C Runtime Programming Guide &gt; Type Encodings.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="ivar-getOffset"><a href="#ivar-getOffset" class="headerlink" title="ivar_getOffset"></a>ivar_getOffset</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ivar_getOffset</div><div class="line">Returns the offset of an instance variable.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">ptrdiff_t ivar_getOffset(Ivar v);</div><div class="line">Discussion</div><div class="line"></div><div class="line">For instance variables of type id or other object types, call object_getIvar and object_setIvar instead of using this offset to access the instance variable data directly.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Associative-References"><a href="#Associative-References" class="headerlink" title="Associative References"></a>Associative References</h3><hr>
<h4 id="objc-setAssociatedObject"><a href="#objc-setAssociatedObject" class="headerlink" title="objc_setAssociatedObject"></a>objc_setAssociatedObject</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">objc_setAssociatedObject</div><div class="line">Sets an associated value for a given object using a given key and association policy.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">The source object for the association.</div><div class="line"></div><div class="line">key</div><div class="line">The key for the association.</div><div class="line"></div><div class="line">value</div><div class="line">The value to associate with the key key for object. Pass nil to clear an existing association.</div><div class="line"></div><div class="line">policy</div><div class="line">The policy for the association. For possible values, see Associative Object Behaviors.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 3.1+</div><div class="line">macOS 10.6+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_setAssociatedObject</div><div class="line">objc_removeAssociatedObjects</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-getAssociatedObject"><a href="#objc-getAssociatedObject" class="headerlink" title="objc_getAssociatedObject"></a>objc_getAssociatedObject</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">objc_getAssociatedObject</div><div class="line">Returns the value associated with a given object for a given key.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_getAssociatedObject(id object, const void *key);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">The source object for the association.</div><div class="line"></div><div class="line">key</div><div class="line">The key for the association.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The value associated with the key key for object.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 3.1+</div><div class="line">macOS 10.6+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_setAssociatedObject</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-removeAssociatedObjects"><a href="#objc-removeAssociatedObjects" class="headerlink" title="objc_removeAssociatedObjects"></a>objc_removeAssociatedObjects</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">objc_removeAssociatedObjects</div><div class="line">Removes all associations for a given object.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_removeAssociatedObjects(id object);</div><div class="line">Parameters</div><div class="line"></div><div class="line">object</div><div class="line">An object that maintains associated objects.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The main purpose of this function is to make it easy to return an object to a &quot;pristine state”. You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject with a nil value to clear an association.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 3.1+</div><div class="line">macOS 10.6+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_setAssociatedObject</div><div class="line">objc_getAssociatedObject</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Sending-Messages"><a href="#Sending-Messages" class="headerlink" title="Sending Messages"></a>Sending Messages</h3><hr>
<h4 id="objc-msgSend"><a href="#objc-msgSend" class="headerlink" title="objc_msgSend"></a>objc_msgSend</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">objc_msgSend</div><div class="line">Sends a message with a simple return value to an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_msgSend(id self, SEL op, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">self</div><div class="line">A pointer that points to the instance of the class that is to receive the message.</div><div class="line"></div><div class="line">op</div><div class="line">The selector of the method that handles the message.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The return value of the method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">When it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-msgSend-fpret"><a href="#objc-msgSend-fpret" class="headerlink" title="objc_msgSend_fpret"></a>objc_msgSend_fpret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">objc_msgSend_fpret</div><div class="line">Sends a message with a floating-point return value to an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">long double objc_msgSend_fpret(id self, SEL op, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">self</div><div class="line">A pointer that points to the instance of the class that is to receive the message.</div><div class="line"></div><div class="line">op</div><div class="line">The selector of the method that handles the message.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">On the i386 platform, the ABI for functions returning a floating-point value is incompatible with that for functions returning an integral type. On the i386 platform, therefore, you must use objc_msgSend_fpret for functions that for functions returning non-integral type. For float or long double return types, cast the function to an appropriate function pointer type first.</div><div class="line"></div><div class="line">This function is not used on the PPC or PPC64 platforms.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">macOS 10.4+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-msgSend-stret"><a href="#objc-msgSend-stret" class="headerlink" title="objc_msgSend_stret"></a>objc_msgSend_stret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">objc_msgSend_stret</div><div class="line">Sends a message with a data-structure return value to an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_msgSend_stret(id self, SEL op, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">stretAddr</div><div class="line">On input, a pointer that points to a block of memory large enough to contain the return value of the method. On output, contains the return value of the method.</div><div class="line"></div><div class="line">theReceiver</div><div class="line">A pointer to the instance of the class that is to receive the message.</div><div class="line"></div><div class="line">theSelector</div><div class="line">A pointer of type SEL. Pass the selector of the method that handles the message.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">When it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-msgSendSuper"><a href="#objc-msgSendSuper" class="headerlink" title="objc_msgSendSuper"></a>objc_msgSendSuper</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">objc_msgSendSuper</div><div class="line">Sends a message with a simple return value to the superclass of an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_msgSendSuper(struct objc_super *super, SEL op, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">super</div><div class="line">A pointer to an objc_super data structure. Pass values identifying the context the message was sent to, including the instance of the class that is to receive the message and the superclass at which to start searching for the method implementation.</div><div class="line"></div><div class="line">op</div><div class="line">A pointer of type SEL. Pass the selector of the method that will handle the message.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The return value of the method identified by op.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">When it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-msgSendSuper-stret"><a href="#objc-msgSendSuper-stret" class="headerlink" title="objc_msgSendSuper_stret"></a>objc_msgSendSuper_stret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">objc_msgSendSuper_stret</div><div class="line">Sends a message with a data-structure return value to the superclass of an instance of a class.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_msgSendSuper_stret(struct objc_super *super, SEL op, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">super</div><div class="line">A pointer to an objc_super data structure. Pass values identifying the context the message was sent to, including the instance of the class that is to receive the message and the superclass at which to start searching for the method implementation.</div><div class="line"></div><div class="line">op</div><div class="line">A pointer of type SEL. Pass the selector of the method.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">When it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Methods"><a href="#Working-with-Methods" class="headerlink" title="Working with Methods"></a>Working with Methods</h3><hr>
<h4 id="method-invoke"><a href="#method-invoke" class="headerlink" title="method_invoke"></a>method_invoke</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">method_invoke</div><div class="line">Calls the implementation of a specified method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id method_invoke(id receiver, Method m, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">receiver</div><div class="line">A pointer to the instance of the class that you want to invoke the method on. This value must not be nil.</div><div class="line"></div><div class="line">m</div><div class="line">The method whose implementation you want to call.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The return value of the method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">Using this function to call the implementation of a method is faster than calling method_getImplementation and method_getName.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-invoke-stret"><a href="#method-invoke-stret" class="headerlink" title="method_invoke_stret"></a>method_invoke_stret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">method_invoke_stret</div><div class="line">Calls the implementation of a specified method that returns a data-structure.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void method_invoke_stret(id receiver, Method m, ...);</div><div class="line">Parameters</div><div class="line"></div><div class="line">receiver</div><div class="line">A pointer to the instance of the class that you want to invoke the method on. This value must not be nil.</div><div class="line"></div><div class="line">m</div><div class="line">The method whose implementation you want to call.</div><div class="line"></div><div class="line">...</div><div class="line">A variable argument list containing the arguments to the method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">Using this function to call the implementation of a method is faster than calling method_getImplementation and method_getName.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getName"><a href="#method-getName" class="headerlink" title="method_getName"></a>method_getName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">method_getName</div><div class="line">Returns the name of a method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">SEL method_getName(Method m);</div><div class="line">Parameters</div><div class="line"></div><div class="line">method</div><div class="line">The method to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer of type SEL.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">To get the method name as a C string, call sel_getName(method_getName(method)).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getImplementation"><a href="#method-getImplementation" class="headerlink" title="method_getImplementation"></a>method_getImplementation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">method_getImplementation</div><div class="line">Returns the implementation of a method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">IMP method_getImplementation(Method m);</div><div class="line">Parameters</div><div class="line"></div><div class="line">method</div><div class="line">The method to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A function pointer of type IMP.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getTypeEncoding"><a href="#method-getTypeEncoding" class="headerlink" title="method_getTypeEncoding"></a>method_getTypeEncoding</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">method_getTypeEncoding</div><div class="line">Returns a string describing a method&apos;s parameter and return types.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * method_getTypeEncoding(Method m);</div><div class="line">Parameters</div><div class="line"></div><div class="line">method</div><div class="line">The method to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string. The string may be NULL.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-copyReturnType"><a href="#method-copyReturnType" class="headerlink" title="method_copyReturnType"></a>method_copyReturnType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">method_copyReturnType</div><div class="line">Returns a string describing a method&apos;s return type.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">char * method_copyReturnType(Method m);</div><div class="line">Parameters</div><div class="line"></div><div class="line">method</div><div class="line">The method to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string describing the return type. You must free the string with free().</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-copyArgumentType"><a href="#method-copyArgumentType" class="headerlink" title="method_copyArgumentType"></a>method_copyArgumentType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">method_copyArgumentType</div><div class="line">Returns a string describing a single parameter type of a method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">char * method_copyArgumentType(Method m, unsigned int index);</div><div class="line">Parameters</div><div class="line"></div><div class="line">method</div><div class="line">The method to inspect.</div><div class="line"></div><div class="line">index</div><div class="line">The index of the parameter to inspect.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string describing the type of the parameter at index index, or NULL if method has no parameter index index. You must free the string with free().</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getReturnType"><a href="#method-getReturnType" class="headerlink" title="method_getReturnType"></a>method_getReturnType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">method_getReturnType</div><div class="line">Returns by reference a string describing a method&apos;s return type.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void method_getReturnType(Method m, char *dst, size_t dst_len);</div><div class="line">Discussion</div><div class="line"></div><div class="line">The method&apos;s return type string is copied to dst. dst is filled as if strncpy(dst, parameter_type, dst_len) were called.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getNumberOfArguments"><a href="#method-getNumberOfArguments" class="headerlink" title="method_getNumberOfArguments"></a>method_getNumberOfArguments</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">method_getNumberOfArguments</div><div class="line">Returns the number of arguments accepted by a method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">unsigned int method_getNumberOfArguments(Method m);</div><div class="line">Parameters</div><div class="line"></div><div class="line">method</div><div class="line">A pointer to a Method data structure. Pass the method in question.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An integer containing the number of arguments accepted by the given method.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getArgumentType"><a href="#method-getArgumentType" class="headerlink" title="method_getArgumentType"></a>method_getArgumentType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">method_getArgumentType</div><div class="line">Returns by reference a string describing a single parameter type of a method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void method_getArgumentType(Method m, unsigned int index, char *dst, size_t dst_len);</div><div class="line">Discussion</div><div class="line"></div><div class="line">The parameter type string is copied to dst. dst is filled as if strncpy(dst, parameter_type, dst_len) were called. If the method contains no parameter with that index, dst is filled as if strncpy(dst, &quot;&quot;, dst_len) were called.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-getDescription"><a href="#method-getDescription" class="headerlink" title="method_getDescription"></a>method_getDescription</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">method_getDescription</div><div class="line">Returns a method description structure for a specified method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">struct objc_method_description * method_getDescription(Method m);</div><div class="line">Parameters</div><div class="line"></div><div class="line">m</div><div class="line">The method you want to inquire about.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An objc_method_description structure that describes the method specified by m.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-setImplementation"><a href="#method-setImplementation" class="headerlink" title="method_setImplementation"></a>method_setImplementation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">method_setImplementation</div><div class="line">Sets the implementation of a method.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">IMP method_setImplementation(Method m, IMP imp);</div><div class="line">Return Value</div><div class="line"></div><div class="line">The previous implementation of the method.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="method-exchangeImplementations"><a href="#method-exchangeImplementations" class="headerlink" title="method_exchangeImplementations"></a>method_exchangeImplementations</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">method_exchangeImplementations</div><div class="line">Exchanges the implementations of two methods.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void method_exchangeImplementations(Method m1, Method m2);</div><div class="line">Discussion</div><div class="line"></div><div class="line">This is an atomic version of the following:</div><div class="line"></div><div class="line">IMP imp1 = method_getImplementation(m1);</div><div class="line">IMP imp2 = method_getImplementation(m2);</div><div class="line">method_setImplementation(m1, imp2);</div><div class="line">method_setImplementation(m2, imp1);</div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Libraries"><a href="#Working-with-Libraries" class="headerlink" title="Working with Libraries"></a>Working with Libraries</h3><hr>
<h4 id="objc-copyImageNames"><a href="#objc-copyImageNames" class="headerlink" title="objc_copyImageNames"></a>objc_copyImageNames</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">objc_copyImageNames</div><div class="line">Returns the names of all the loaded Objective-C frameworks and dynamic libraries.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char ** objc_copyImageNames(unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">outCount</div><div class="line">The number of names in the returned array.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of C strings representing the names of all the loaded Objective-C frameworks and dynamic libraries.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="class-getImageName"><a href="#class-getImageName" class="headerlink" title="class_getImageName"></a>class_getImageName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class_getImageName</div><div class="line">Returns the name of the dynamic library a class originated from.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * class_getImageName(Class cls);</div><div class="line">Parameters</div><div class="line"></div><div class="line">cls</div><div class="line">The class you are inquiring about.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string representing the name of the library containing the cls class.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-copyClassNamesForImage"><a href="#objc-copyClassNamesForImage" class="headerlink" title="objc_copyClassNamesForImage"></a>objc_copyClassNamesForImage</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">objc_copyClassNamesForImage</div><div class="line">Returns the names of all the classes within a specified library or framework.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char ** objc_copyClassNamesForImage(const char *image, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">image</div><div class="line">The library or framework you are inquiring about.</div><div class="line"></div><div class="line">outCount</div><div class="line">The number of class names in the returned array.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of C strings representing all of the class names within the specified library or framework.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Selectors"><a href="#Working-with-Selectors" class="headerlink" title="Working with Selectors"></a>Working with Selectors</h3><hr>
<h4 id="sel-getName"><a href="#sel-getName" class="headerlink" title="sel_getName"></a>sel_getName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">sel_getName</div><div class="line">Returns the name of the method specified by a given selector.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * sel_getName(SEL sel);</div><div class="line">Parameters</div><div class="line"></div><div class="line">aSelector</div><div class="line">A pointer of type SEL. Pass the selector whose name you wish to determine.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string indicating the name of the selector.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="sel-registerName"><a href="#sel-registerName" class="headerlink" title="sel_registerName"></a>sel_registerName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">sel_registerName</div><div class="line">Registers a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">SEL sel_registerName(const char *str);</div><div class="line">Parameters</div><div class="line"></div><div class="line">str</div><div class="line">A pointer to a C string. Pass the name of the method you wish to register.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer of type SEL specifying the selector for the named method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You must register a method name with the Objective-C runtime system to obtain the method’s selector before you can add the method to a class definition. If the method name has already been registered, this function simply returns the selector.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="sel-getUid"><a href="#sel-getUid" class="headerlink" title="sel_getUid"></a>sel_getUid</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">sel_getUid</div><div class="line">Registers a method name with the Objective-C runtime system.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">SEL sel_getUid(const char *str);</div><div class="line">Parameters</div><div class="line"></div><div class="line">str</div><div class="line">A pointer to a C string. Pass the name of the method you wish to register.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A pointer of type SEL specifying the selector for the named method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The implementation of this method is identical to the implementation of sel_registerName.</div><div class="line"></div><div class="line">Version-Notes</div><div class="line"></div><div class="line">Prior to OS X version 10.0, this method tried to find the selector mapped to the given name and returned NULL if the selector was not found. This was changed for safety, because it was observed that many of the callers of this function did not check the return value for NULL.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.0+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="sel-isEqual"><a href="#sel-isEqual" class="headerlink" title="sel_isEqual"></a>sel_isEqual</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">sel_isEqual</div><div class="line">Returns a Boolean value that indicates whether two selectors are equal.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL sel_isEqual(SEL lhs, SEL rhs);</div><div class="line">Parameters</div><div class="line"></div><div class="line">lhs</div><div class="line">The selector to compare with rhs.</div><div class="line"></div><div class="line">rhs</div><div class="line">The selector to compare with lhs.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if rhs and rhs are equal, otherwise NO.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">sel_isEqual is equivalent to ==.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Protocols"><a href="#Working-with-Protocols" class="headerlink" title="Working with Protocols"></a>Working with Protocols</h3><hr>
<h4 id="objc-getProtocol"><a href="#objc-getProtocol" class="headerlink" title="objc_getProtocol"></a>objc_getProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">objc_getProtocol</div><div class="line">Returns a specified protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Protocol * objc_getProtocol(const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">name</div><div class="line">The name of a protocol.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The protocol named name, or NULL if no protocol named name could be found.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function acquires the runtime lock.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-allocateProtocol"><a href="#objc-allocateProtocol" class="headerlink" title="objc_allocateProtocol"></a>objc_allocateProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">objc_allocateProtocol</div><div class="line">Creates a new protocol instance.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Protocol * objc_allocateProtocol(const char *name);</div><div class="line">Parameters</div><div class="line"></div><div class="line">name</div><div class="line">The name of the protocol you want to create.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A new protocol instance or nil if a protocol with the same name as name already exists.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">You must register the returned protocol instance with the objc_registerProtocol function before you can use it.</div><div class="line"></div><div class="line">There is no dispose method associated with this function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_registerProtocol</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-registerProtocol"><a href="#objc-registerProtocol" class="headerlink" title="objc_registerProtocol"></a>objc_registerProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">objc_registerProtocol</div><div class="line">Registers a newly created protocol with the Objective-C runtime.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_registerProtocol(Protocol *proto);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">The protocol you want to register with the Objective-C runtime.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">When you create a new protocol using the objc_allocateProtocol, you then register it with the Objective-C runtime by calling this function. After a protocol is successfully registered, it is immutable and ready to use.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_allocateProtocol</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-addMethodDescription"><a href="#protocol-addMethodDescription" class="headerlink" title="protocol_addMethodDescription"></a>protocol_addMethodDescription</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">protocol_addMethodDescription</div><div class="line">Adds a method to a protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void protocol_addMethodDescription(Protocol *proto, SEL name, const char *types, BOOL isRequiredMethod, BOOL isInstanceMethod);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">The protocol you want to add a method to.</div><div class="line"></div><div class="line">name</div><div class="line">The name of the method you want to add.</div><div class="line"></div><div class="line">types</div><div class="line">A C string representing the signature of the method you want to add.</div><div class="line"></div><div class="line">isRequiredMethod</div><div class="line">A Boolean indicating whether the method is a required method of the proto protocol. If YES, the method is a required method; if NO, the method is an optional method.</div><div class="line"></div><div class="line">isInstanceMethod</div><div class="line">A Boolean indicating whether the method is an instance method. If YES, the method is an instance method; if NO, the method is a class method.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">To add a method to a protocol using this function, the protocol must be under construction. That is, you must add any methods to proto before you register it with the Objective-C runtime (via the objc_registerProtocol function).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-addProtocol"><a href="#protocol-addProtocol" class="headerlink" title="protocol_addProtocol"></a>protocol_addProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">protocol_addProtocol</div><div class="line">Adds a registered protocol to another protocol that is under construction.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void protocol_addProtocol(Protocol *proto, Protocol *addition);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">The protocol you want to add the registered protocol to.</div><div class="line"></div><div class="line">addition</div><div class="line">The registered protocol you want to add to proto.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The protocol you want to add to (proto) must be under construction—allocated but not yet registered with the Objective-C runtime. The protocol you want to add (addition) must be registered already.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-addProperty"><a href="#protocol-addProperty" class="headerlink" title="protocol_addProperty"></a>protocol_addProperty</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">protocol_addProperty</div><div class="line">Adds a property to a protocol that is under construction.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void protocol_addProperty(Protocol *proto, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">The protocol you want to add a property to.</div><div class="line"></div><div class="line">name</div><div class="line">The name of the property you want to add.</div><div class="line"></div><div class="line">attributes</div><div class="line">An array of property attributes.</div><div class="line"></div><div class="line">attributeCount</div><div class="line">The number of properties in attributes.</div><div class="line"></div><div class="line">isRequiredProperty</div><div class="line">A Boolean indicating whether the property’s accessor methods are required methods of the proto protocol. If YES, the property’s accessor methods are required methods; if NO, the property’s accessor methods are optional methods.</div><div class="line"></div><div class="line">isInstanceProperty</div><div class="line">A Boolean indicating whether the property’s accessor methods are instance methods. If YES, the property’s accessor methods are instance methods. YES is the only value allowed for a property. As a result, if you set this value to NO, the property will not be added to the protocol.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The protocol you want to add the property to must be under construction—allocated but not yet registered with the Objective-C runtime (via the objc_registerProtocol function).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-getName"><a href="#protocol-getName" class="headerlink" title="protocol_getName"></a>protocol_getName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">protocol_getName</div><div class="line">Returns a the name of a protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * protocol_getName(Protocol *p);</div><div class="line">Parameters</div><div class="line"></div><div class="line">p</div><div class="line">A protocol.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The name of the protocol p as a C string.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-isEqual"><a href="#protocol-isEqual" class="headerlink" title="protocol_isEqual"></a>protocol_isEqual</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">protocol_isEqual</div><div class="line">Returns a Boolean value that indicates whether two protocols are equal.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL protocol_isEqual(Protocol *proto, Protocol *other);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">A protocol.</div><div class="line"></div><div class="line">other</div><div class="line">A protocol.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if proto is the same as other, otherwise NO.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-copyMethodDescriptionList"><a href="#protocol-copyMethodDescriptionList" class="headerlink" title="protocol_copyMethodDescriptionList"></a>protocol_copyMethodDescriptionList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">protocol_copyMethodDescriptionList</div><div class="line">Returns an array of method descriptions of methods meeting a given specification for a given protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">struct objc_method_description * protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">p</div><div class="line">A protocol.</div><div class="line"></div><div class="line">isRequiredMethod</div><div class="line">A Boolean value that indicates whether returned methods should be required methods (pass YES to specify required methods).</div><div class="line"></div><div class="line">isInstanceMethod</div><div class="line">A Boolean value that indicates whether returned methods should be instance methods (pass YES to specify instance methods).</div><div class="line"></div><div class="line">outCount</div><div class="line">Upon return, contains the number of method description structures in the returned array.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C array of objc_method_description structures containing the names and types of p’s methods specified by isRequiredMethod and isInstanceMethod. The array contains *outCount pointers followed by a NULL terminator. You must free the list with free().</div><div class="line"></div><div class="line">If the protocol declares no methods that meet the specification, NULL is returned and *outCount is 0.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">Methods in other protocols adopted by this protocol are not included.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-getMethodDescription"><a href="#protocol-getMethodDescription" class="headerlink" title="protocol_getMethodDescription"></a>protocol_getMethodDescription</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">protocol_getMethodDescription</div><div class="line">Returns a method description structure for a specified method of a given protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">struct objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod);</div><div class="line">Parameters</div><div class="line"></div><div class="line">p</div><div class="line">A protocol.</div><div class="line"></div><div class="line">aSel</div><div class="line">A selector</div><div class="line"></div><div class="line">isRequiredMethod</div><div class="line">A Boolean value that indicates whether aSel is a required method.</div><div class="line"></div><div class="line">isInstanceMethod</div><div class="line">A Boolean value that indicates whether aSel is an instance method.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An objc_method_description structure that describes the method specified by aSel, isRequiredMethod, and isInstanceMethod for the protocol p.</div><div class="line"></div><div class="line">If the protocol does not contain the specified method, returns an objc_method_description structure with the value &#123;NULL, NULL&#125;.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-copyPropertyList"><a href="#protocol-copyPropertyList" class="headerlink" title="protocol_copyPropertyList"></a>protocol_copyPropertyList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">protocol_copyPropertyList</div><div class="line">Returns an array of the properties declared by a protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">objc_property_t * protocol_copyPropertyList(Protocol *proto, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">A protocol.</div><div class="line"></div><div class="line">outCount</div><div class="line">Upon return, contains the number of elements in the returned array.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C array of pointers of type objc_property_t describing the properties declared by proto. Any properties declared by other protocols adopted by this protocol are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().</div><div class="line"></div><div class="line">If the protocol declares no properties, NULL is returned and *outCount is 0.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-getProperty"><a href="#protocol-getProperty" class="headerlink" title="protocol_getProperty"></a>protocol_getProperty</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">protocol_getProperty</div><div class="line">Returns the specified property of a given protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">objc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">A protocol.</div><div class="line"></div><div class="line">name</div><div class="line">The name of a property.</div><div class="line"></div><div class="line">isRequiredProperty</div><div class="line">A Boolean value that indicates whether name is a required property.</div><div class="line"></div><div class="line">isInstanceProperty</div><div class="line">A Boolean value that indicates whether name is an instance property.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The property specified by name, isRequiredProperty, and isInstanceProperty for proto, or NULL if none of proto’s properties meets the specification.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-copyProtocolList"><a href="#protocol-copyProtocolList" class="headerlink" title="protocol_copyProtocolList"></a>protocol_copyProtocolList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">protocol_copyProtocolList</div><div class="line">Returns an array of the protocols adopted by a protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">Protocol ** protocol_copyProtocolList(Protocol *proto, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">A protocol.</div><div class="line"></div><div class="line">outCount</div><div class="line">Upon return, contains the number of elements in the returned array.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">A C array of protocols adopted by proto. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().</div><div class="line"></div><div class="line">If the protocol declares no properties, NULL is returned and *outCount is 0.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="protocol-conformsToProtocol"><a href="#protocol-conformsToProtocol" class="headerlink" title="protocol_conformsToProtocol"></a>protocol_conformsToProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">protocol_conformsToProtocol</div><div class="line">Returns a Boolean value that indicates whether one protocol conforms to another protocol.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other);</div><div class="line">Parameters</div><div class="line"></div><div class="line">proto</div><div class="line">A protocol.</div><div class="line"></div><div class="line">other</div><div class="line">A protocol.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if proto conforms to other, otherwise NO.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">One protocol can incorporate other protocols using the same syntax that classes use to adopt a protocol:</div><div class="line"></div><div class="line">@protocol ProtocolName &lt; protocol list &gt;</div><div class="line">All the protocols listed between angle brackets are considered part of the ProtocolName protocol.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Working-with-Properties"><a href="#Working-with-Properties" class="headerlink" title="Working with Properties"></a>Working with Properties</h3><hr>
<h4 id="property-getName"><a href="#property-getName" class="headerlink" title="property_getName"></a>property_getName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">property_getName</div><div class="line">Returns the name of a property.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * property_getName(objc_property_t property);</div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string containing the property&apos;s name.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="property-getAttributes"><a href="#property-getAttributes" class="headerlink" title="property_getAttributes"></a>property_getAttributes</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">property_getAttributes</div><div class="line">Returns the attribute string of a property.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">const char * property_getAttributes(objc_property_t property);</div><div class="line">Return Value</div><div class="line"></div><div class="line">A C string containing the property&apos;s attributes.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The format of the attribute string is described in Declared Properties in Objective-C Runtime Programming Guide.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="property-copyAttributeValue"><a href="#property-copyAttributeValue" class="headerlink" title="property_copyAttributeValue"></a>property_copyAttributeValue</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">property_copyAttributeValue</div><div class="line">Returns the value of a property attribute given the attribute name.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">char * property_copyAttributeValue(objc_property_t property, const char *attributeName);</div><div class="line">Parameters</div><div class="line"></div><div class="line">property</div><div class="line">The property whose value you are interested in.</div><div class="line"></div><div class="line">attributeName</div><div class="line">A C string representing the name of the attribute.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The value string of the attributeName attribute, if one exists in property; otherwise, nil. You must free the returned value string with free().</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="property-copyAttributeList"><a href="#property-copyAttributeList" class="headerlink" title="property_copyAttributeList"></a>property_copyAttributeList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">property_copyAttributeList</div><div class="line">Returns an array of property attributes for a given property.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">objc_property_attribute_t * property_copyAttributeList(objc_property_t property, unsigned int *outCount);</div><div class="line">Parameters</div><div class="line"></div><div class="line">property</div><div class="line">The property whose attributes you want to copy.</div><div class="line"></div><div class="line">outCount</div><div class="line">The number of attributes returned in the array.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">An array of property attributes. You must free the array with free().</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Using-Objective-C-Language-Features"><a href="#Using-Objective-C-Language-Features" class="headerlink" title="Using Objective-C Language Features"></a>Using Objective-C Language Features</h3><hr>
<h4 id="objc-enumerationMutation"><a href="#objc-enumerationMutation" class="headerlink" title="objc_enumerationMutation"></a>objc_enumerationMutation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">objc_enumerationMutation</div><div class="line">Inserted by the compiler when a mutation is detected during a foreach iteration.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_enumerationMutation(id obj);</div><div class="line">Parameters</div><div class="line"></div><div class="line">obj</div><div class="line">The object being mutated.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">The compiler inserts this function when it detects that an object is mutated during a foreach iteration. The function is called when a mutation occurs, and the enumeration mutation handler is enacted if it is set up (via the objc_setEnumerationMutationHandler function). If the handler is not set up, a fatal error occurs.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">objc_setEnumerationMutationHandler</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-setEnumerationMutationHandler"><a href="#objc-setEnumerationMutationHandler" class="headerlink" title="objc_setEnumerationMutationHandler"></a>objc_setEnumerationMutationHandler</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">objc_setEnumerationMutationHandler</div><div class="line">Sets the current mutation handler.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">void objc_setEnumerationMutationHandler(void (*handler)(id));</div><div class="line">Parameters</div><div class="line"></div><div class="line">handler</div><div class="line">A function pointer to the new mutation handler.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 2.0+</div><div class="line">macOS 10.5+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="imp-implementationWithBlock"><a href="#imp-implementationWithBlock" class="headerlink" title="imp_implementationWithBlock"></a>imp_implementationWithBlock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">imp_implementationWithBlock</div><div class="line">Creates a pointer to a function that calls the specified block when the method is called.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">IMP imp_implementationWithBlock(id block);</div><div class="line">Parameters</div><div class="line"></div><div class="line">block</div><div class="line">The block that implements this method. The signature of block should be method_return_type ^(id self, self, method_args …). The selector of the method is not available to block. block is copied with Block_copy().</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The IMP that calls block. You must dispose of the returned IMP using the function.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">imp_getBlock</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="imp-getBlock"><a href="#imp-getBlock" class="headerlink" title="imp_getBlock"></a>imp_getBlock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">imp_getBlock</div><div class="line">Returns the block associated with an IMP that was created using imp_implementationWithBlock.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id imp_getBlock(IMP anImp);</div><div class="line">Parameters</div><div class="line"></div><div class="line">anImp</div><div class="line">The IMP that calls this block.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The block called by anImp.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">imp_implementationWithBlock</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="imp-removeBlock"><a href="#imp-removeBlock" class="headerlink" title="imp_removeBlock"></a>imp_removeBlock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">imp_removeBlock</div><div class="line">Disassociates a block from an IMP that was created using imp_implementationWithBlock, and releases the copy of the block that was created.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">BOOL imp_removeBlock(IMP anImp);</div><div class="line">Parameters</div><div class="line"></div><div class="line">anImp</div><div class="line">An IMP that was created using the imp_implementationWithBlock function.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">YES if the block was released successfully; otherwise, NO (for example, the function returns NO if the block was not used to create anImp previously).</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 4.3+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div><div class="line">See Also</div><div class="line"></div><div class="line">imp_implementationWithBlock</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-loadWeak"><a href="#objc-loadWeak" class="headerlink" title="objc_loadWeak"></a>objc_loadWeak</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">objc_loadWeak</div><div class="line">Loads the object referenced by a weak pointer and returns it.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_loadWeak(id *location);</div><div class="line">Parameters</div><div class="line"></div><div class="line">location</div><div class="line">The address of the weak pointer.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The object pointed to by location, or nil if location is nil.</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function loads the object referenced by a weak pointer and returns it after retaining and autoreleasing the object. As a result, the object stays alive long enough for the caller to use it. This function is typically used anywhere a __weak variable is used in an expression.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 5.0+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h4 id="objc-storeWeak"><a href="#objc-storeWeak" class="headerlink" title="objc_storeWeak"></a>objc_storeWeak</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">objc_storeWeak</div><div class="line">Stores a new value in a __weak variable.</div><div class="line"></div><div class="line">Declaration</div><div class="line"></div><div class="line">id objc_storeWeak(id *location, id obj);</div><div class="line">Parameters</div><div class="line"></div><div class="line">location</div><div class="line">The address of the weak pointer.</div><div class="line"></div><div class="line">obj</div><div class="line">The new object you want the weak pointer to now point to.</div><div class="line"></div><div class="line">Return Value</div><div class="line"></div><div class="line">The value stored in location (that is, obj).</div><div class="line"></div><div class="line">Discussion</div><div class="line"></div><div class="line">This function is typically used anywhere a __weak variable is the target of an assignment.</div><div class="line"></div><div class="line">Availability</div><div class="line"></div><div class="line">iOS 5.0+</div><div class="line">macOS 10.7+</div><div class="line">tvOS 9.0+</div><div class="line">watchOS 1.0+</div></pre></td></tr></table></figure>
<ul>
<li>用途：</li>
<li>声明:``</li>
<li>参数：<br>** </li>
<li>返回值：</li>
</ul>
<h3 id="Class-Definition-Data-Structures"><a href="#Class-Definition-Data-Structures" class="headerlink" title="Class-Definition Data Structures"></a>Class-Definition Data Structures</h3><hr>
<blockquote>
<p>Class-Definition Data Structures<br>Class<br>An opaque type that represents an Objective-C class.<br>Method<br>An opaque type that represents a method in a class definition.<br>Ivar<br>An opaque type that represents an instance variable.<br>Category<br>An opaque type that represents a category.<br>objc_property_t<br>An opaque type that represents an Objective-C declared property.<br>IMP<br>A pointer to the start of a method implementation.<br>SEL<br>Defines an opaque type that represents a method selector.<br>objc_method_description<br>Defines an Objective-C method.<br>objc_method_listDeprecated<br>Contains an array of method definitions.<br>objc_cache<br>Performance optimization for method calls. Contains pointers to recently used methods.<br>objc_protocol_list<br>Represents a list of formal protocols.<br>objc_property_attribute_t<br>Defines a property attribute.</p>
</blockquote>
<h3 id="Instance-Data-Types"><a href="#Instance-Data-Types" class="headerlink" title="Instance Data Types"></a>Instance Data Types</h3><hr>
<p>&gt;<br>id<br>A pointer to an instance of a class.<br>objc_object<br>Represents an instance of a class.<br>objc_super<br>Specifies the superclass of an instance.</p>
<h3 id="Boolean-Value"><a href="#Boolean-Value" class="headerlink" title="Boolean Value"></a>Boolean Value</h3><blockquote>
<p>BOOL<br>Type to represent a Boolean value.</p>
</blockquote>
<h3 id="Associative-References-1"><a href="#Associative-References-1" class="headerlink" title="Associative References"></a>Associative References</h3><blockquote>
<p>objc_AssociationPolicy<br>Type to specify the behavior of an association.</p>
</blockquote>
<h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><blockquote>
<p>Boolean Values<br>These macros define convenient constants to represent Boolean values.<br>Null Values<br>These macros define null values for classes and instances.<br>Dispatch Function Prototypes<br>This macro indicates whether dispatch functions must be cast to an appropriate function pointer type.<br>Objective-C Root Class<br>This macro annotates a class as being an Objective-C root class.<br>Local Variable Storage Duration<br>This macro indicates that the values stored in certain local variables should not be aggressively released by the compiler during optimization.<br>Associative Object Behaviors<br>Policies related to associative references.</p>
</blockquote>
<h3 id="See-Also"><a href="#See-Also" class="headerlink" title="See Also"></a>See Also</h3><blockquote>
<p>Related Documentation</p>
</blockquote>
<h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Objective-C-Runtime-文档解读&quot;&gt;&lt;a href=&quot;#Objective-C-Runtime-文档解读&quot; class=&quot;headerlink&quot; title=&quot;Objective-C Runtime 文档解读&quot;&gt;&lt;/a&gt;Objective-C Runtime 文档解读&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Describes the macOS Objective-C runtime library support functions and data structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;介绍了&lt;code&gt;MacOS Objective-C&lt;/code&gt; 运行时库支持的函数和数据结构。&lt;/p&gt;
&lt;h2 id=&quot;Overview-概述：&quot;&gt;&lt;a href=&quot;#Overview-概述：&quot; class=&quot;headerlink&quot; title=&quot;Overview - 概述：&quot;&gt;&lt;/a&gt;Overview - 概述：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The Objective-C runtime is a runtime library that provides support for the dynamic properties of the Objective-C language, and as such is linked to by all Objective-C apps. Objective-C runtime library support functions are implemented in the shared library found at /usr/lib/libobjc.A.dylib.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Objective-C runtime&lt;/code&gt;是一个为Objective-C语言提供底层支持运行时库，因此它跟所有的Objective-C 应用都有所关联。Objective-C runtime 库所支持的方法（函数、功能？）共享在  /usr/lib/libobjc.A.dylib中。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
      <category term="Runtime" scheme="http://kaelblog.website/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime</title>
    <link href="http://kaelblog.website/2017/05/16/Objective-C-Runtime/"/>
    <id>http://kaelblog.website/2017/05/16/Objective-C-Runtime/</id>
    <published>2017-05-16T03:14:31.000Z</published>
    <updated>2017-05-17T10:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C-Runtime"><a href="#Objective-C-Runtime" class="headerlink" title="Objective-C Runtime"></a>Objective-C Runtime</h1><h2 id="OC–动态性语言"><a href="#OC–动态性语言" class="headerlink" title="OC–动态性语言"></a>OC–动态性语言</h2><blockquote>
<p>Objective-C 扩展了 C 语言，并加入了面向对象特性和 Smalltalk 式的消息传递机制。而这个扩展的核心是一个用 C 和 编译语言 写的 Runtime 库。它是 Objective-C 面向对象和动态机制的基石。<br>那么“动态”体现在哪里呢？</p>
<p>比如 C ，调用一个方法其实就是跳到内存中的某一点并开始执行一段代码。没有任何动态的特性，因为这在编译时就决定好了。</p>
<p>而在 Objective-C 中，[object foo] 语法并不会立即执行 foo 这个方法的代码。它是在运行时给 object 发送一条叫 foo 的消息。这个消息，也许会由 object 来处理，也许会被转发给另一个对象，或者不予理睬假装没收到这个消息。多条不同的消息也可以对应同一个方法实现。这些都是在程序运行的时候决定的。</p>
</blockquote>
<h2 id="objc-object-objc-class-以及-Ojbc-method"><a href="#objc-object-objc-class-以及-Ojbc-method" class="headerlink" title="objc_object, objc_class 以及 Ojbc_method"></a>objc_object, objc_class 以及 Ojbc_method</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">struct objc_object &#123;  </div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;;</div><div class="line">struct objc_class &#123;  </div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">#if !__OBJC2__</div><div class="line">    Class super_class;</div><div class="line">    const char *name;</div><div class="line">    long version;</div><div class="line">    long info;</div><div class="line">    long instance_size;</div><div class="line">    struct objc_ivar_list *ivars;</div><div class="line">    **struct objc_method_list **methodLists**;</div><div class="line">    **struct objc_cache *cache**;</div><div class="line">    struct objc_protocol_list *protocols;</div><div class="line">#endif</div><div class="line">&#125;;</div><div class="line">struct objc_method_list &#123;  </div><div class="line">    struct objc_method_list *obsolete;</div><div class="line">    int method_count;</div><div class="line">#ifdef __LP64__</div><div class="line">    int space;</div><div class="line">#endif</div><div class="line">    /* variable length structure */</div><div class="line">    struct objc_method method_list[1];</div><div class="line">&#125;;</div><div class="line">struct objc_method &#123;  </div><div class="line">    SEL method_name;</div><div class="line">    char *method_types;    /* a string representing argument/return types */</div><div class="line">    IMP method_imp;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Objective-C-Runtime&quot;&gt;&lt;a href=&quot;#Objective-C-Runtime&quot; class=&quot;headerlink&quot; title=&quot;Objective-C Runtime&quot;&gt;&lt;/a&gt;Objective-C Runtime&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="Runtime" scheme="http://kaelblog.website/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试题大汇总</title>
    <link href="http://kaelblog.website/2017/05/15/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB/"/>
    <id>http://kaelblog.website/2017/05/15/iOS面试题大汇总/</id>
    <published>2017-05-15T08:53:10.000Z</published>
    <updated>2017-05-17T10:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h2><h2 id="OC基础"><a href="#OC基础" class="headerlink" title="OC基础"></a>OC基础</h2><h2 id="swift基础"><a href="#swift基础" class="headerlink" title="swift基础"></a>swift基础</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C语言基础&quot;&gt;&lt;a href=&quot;#C语言基础&quot; class=&quot;headerlink&quot; title=&quot;C语言基础&quot;&gt;&lt;/a&gt;C语言基础&lt;/h2&gt;&lt;h2 id=&quot;OC基础&quot;&gt;&lt;a href=&quot;#OC基础&quot; class=&quot;headerlink&quot; title=&quot;OC基础&quot;
    
    </summary>
    
      <category term="面试" scheme="http://kaelblog.website/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="http://kaelblog.website/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>学习资源（网址）</title>
    <link href="http://kaelblog.website/2017/05/15/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%EF%BC%88%E7%BD%91%E5%9D%80%EF%BC%89/"/>
    <id>http://kaelblog.website/2017/05/15/学习资源（网址）/</id>
    <published>2017-05-15T07:05:44.000Z</published>
    <updated>2017-05-23T06:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习资源网址"><a href="#学习资源网址" class="headerlink" title="学习资源网址"></a>学习资源网址</h1><h2 id="技术学习资源"><a href="#技术学习资源" class="headerlink" title="技术学习资源"></a>技术学习资源</h2><h3 id="sublime学习资源"><a href="#sublime学习资源" class="headerlink" title="sublime学习资源"></a>sublime学习资源</h3><ul>
<li><a href="http://www.jianshu.com/p/aa30cc25c91b" target="_blank" rel="external">Sublime 入门+进阶</a>：<code>http://www.jianshu.com/p/aa30cc25c91b</code></li>
<li><a href="http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/" target="_blank" rel="external">sublime全解</a>: <code>http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/</code></li>
<li><a href="https://dribbble.com/" target="_blank" rel="external">Sublime 图标下载</a>: <code>https://dribbble.com/</code></li>
</ul>
<h3 id="MarkDown学习资源"><a href="#MarkDown学习资源" class="headerlink" title="MarkDown学习资源"></a>MarkDown学习资源</h3><a id="more"></a>
<ul>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Wow!Ubuntu</a>: <code>http://wowubuntu.com/markdown/</code></li>
<li><a href="http://blog.csdn.net/witnessai1/article/details/52551362" target="_blank" rel="external">Markdown 语法手册</a>: <code>http://blog.csdn.net/witnessai1/article/details/52551362</code></li>
<li><a href="https://sanwen8.cn/p/670KuHA.html" target="_blank" rel="external"> 精致Markdown【语法篇】</a>:<code>https://sanwen8.cn/p/670KuHA.html</code></li>
<li><a href="https://segmentfault.com/markdown" target="_blank" rel="external">Markdown编辑器语法指南 - SegmentFault</a> : <code>https://segmentfault.com/markdown</code>  </li>
<li><a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="external">sublime + Markdown</a>: <code>http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/</code></li>
</ul>
<h3 id="Shell脚本学习资源"><a href="#Shell脚本学习资源" class="headerlink" title="Shell脚本学习资源"></a>Shell脚本学习资源</h3><ul>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">shell教程</a>: <code>http://www.runoob.com/linux/linux-shell.html</code></li>
<li><a href="http://www.cnblogs.com/Lynn-Zhang/p/5758287.html" target="_blank" rel="external">shell脚本入门</a>: <code>http://www.cnblogs.com/Lynn-Zhang/p/5758287.html</code></li>
</ul>
<h3 id="Git命令学习资源"><a href="#Git命令学习资源" class="headerlink" title="Git命令学习资源"></a>Git命令学习资源</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">Git命令清单–阮一峰</a>: <code>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</code></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程–廖雪峰</a>: <code>http://www.liaoxuefeng.com</code></li>
<li><a href="https://segmentfault.com/a/1190000009491296" target="_blank" rel="external">本地项目推送到远程git仓库</a>: <code>https://segmentfault.com/a/1190000009491296</code></li>
<li><a href="https://segmentfault.com/a/1190000009516449" target="_blank" rel="external">Git使用教程–segmenfault</a>: <code>https://segmentfault.com/a/1190000009516449</code></li>
</ul>
<h3 id="Mac终端命令"><a href="#Mac终端命令" class="headerlink" title="Mac终端命令"></a>Mac终端命令</h3><ul>
<li><a href="http://www.jianshu.com/p/3291de46f3ff" target="_blank" rel="external">终端命令大全:简书</a>：<code>http://www.jianshu.com/p/3291de46f3ff</code></li>
<li><a href="http://blog.csdn.net/u014220518/article/details/53282785" target="_blank" rel="external">Mac终端命令总结</a>： <code>http://blog.csdn.net/u014220518/article/details/53282785</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学习资源网址&quot;&gt;&lt;a href=&quot;#学习资源网址&quot; class=&quot;headerlink&quot; title=&quot;学习资源网址&quot;&gt;&lt;/a&gt;学习资源网址&lt;/h1&gt;&lt;h2 id=&quot;技术学习资源&quot;&gt;&lt;a href=&quot;#技术学习资源&quot; class=&quot;headerlink&quot; title=&quot;技术学习资源&quot;&gt;&lt;/a&gt;技术学习资源&lt;/h2&gt;&lt;h3 id=&quot;sublime学习资源&quot;&gt;&lt;a href=&quot;#sublime学习资源&quot; class=&quot;headerlink&quot; title=&quot;sublime学习资源&quot;&gt;&lt;/a&gt;sublime学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/aa30cc25c91b&quot;&gt;Sublime 入门+进阶&lt;/a&gt;：&lt;code&gt;http://www.jianshu.com/p/aa30cc25c91b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/&quot;&gt;sublime全解&lt;/a&gt;: &lt;code&gt;http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/&quot;&gt;Sublime 图标下载&lt;/a&gt;: &lt;code&gt;https://dribbble.com/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;MarkDown学习资源&quot;&gt;&lt;a href=&quot;#MarkDown学习资源&quot; class=&quot;headerlink&quot; title=&quot;MarkDown学习资源&quot;&gt;&lt;/a&gt;MarkDown学习资源&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="学习资源" scheme="http://kaelblog.website/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 命令识记</title>
    <link href="http://kaelblog.website/2017/05/10/command-of-hexo/"/>
    <id>http://kaelblog.website/2017/05/10/command-of-hexo/</id>
    <published>2017-05-10T08:00:43.000Z</published>
    <updated>2017-05-15T07:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-命令识记"><a href="#Hexo-命令识记" class="headerlink" title="Hexo 命令识记"></a>Hexo 命令识记</h1><h2 id="先来看下终端命令下的help"><a href="#先来看下终端命令下的help" class="headerlink" title="先来看下终端命令下的help"></a>先来看下终端命令下的help</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Usage: hexo &lt;command&gt;</div><div class="line">Commands:</div><div class="line">  clean     Removed generated files and cache.</div><div class="line">  config    Get or set configurations.</div><div class="line">  deploy    Deploy your website.</div><div class="line">  generate  Generate static files.</div><div class="line">  help      Get help on a command.</div><div class="line">  init      Create a new Hexo folder.</div><div class="line">  list      List the information of the site</div><div class="line">  migrate   Migrate your site from other system to Hexo.</div><div class="line">  new       Create a new post.</div><div class="line">  publish   Moves a draft post from _drafts to _posts folder.</div><div class="line">  render    Render files with renderer plugins.</div><div class="line">  server    Start the server.</div><div class="line">  version   Display version information.</div><div class="line"></div><div class="line">Global Options:</div><div class="line">  --config  Specify config file instead of using _config.yml</div><div class="line">  --cwd     Specify the CWD</div><div class="line">  --debug   Display all verbose messages in the terminal</div><div class="line">  --draft   Display draft posts</div><div class="line">  --safe    Disable all plugins and scripts</div><div class="line">  --silent  Hide output on console</div></pre></td></tr></table></figure>
<h2 id="具体使用和解释"><a href="#具体使用和解释" class="headerlink" title="具体使用和解释"></a>具体使用和解释</h2><a id="more"></a>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul>
<li>clean 移除上次generated生成的 html 缓存文件</li>
<li>config 查看配置文件</li>
<li>deploy 发布到网站</li>
<li>generate 把MarkDown文件（后缀为.md的文件）编译成HTML、CSS 文件</li>
<li>help 获取Hexo命令行的帮助</li>
<li>init 创建一个Hexo文件夹📂，里面包含了Hexo的环境配置</li>
<li>list 列出所有的路由索引（type,categorys）</li>
<li>migrate 从其他博客迁移内容</li>
<li>new 创建一个新的文章（新的*.md文件）</li>
<li>publish 把草稿从 _drafts 文件夹 移动到 _posts 文件夹</li>
<li>render 用render插件渲染文件</li>
<li>server 开启本地服务，如果想要调试，浏览器打开 ‘<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>‘ Cotr + C 停止服务</li>
<li>version 展示Hexo版本信息</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-命令识记&quot;&gt;&lt;a href=&quot;#Hexo-命令识记&quot; class=&quot;headerlink&quot; title=&quot;Hexo 命令识记&quot;&gt;&lt;/a&gt;Hexo 命令识记&lt;/h1&gt;&lt;h2 id=&quot;先来看下终端命令下的help&quot;&gt;&lt;a href=&quot;#先来看下终端命令下的help&quot; class=&quot;headerlink&quot; title=&quot;先来看下终端命令下的help&quot;&gt;&lt;/a&gt;先来看下终端命令下的help&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Usage: hexo &amp;lt;command&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Commands:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  clean     Removed generated files and cache.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  config    Get or set configurations.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  deploy    Deploy your website.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  generate  Generate static files.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  help      Get help on a command.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  init      Create a new Hexo folder.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  list      List the information of the site&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  migrate   Migrate your site from other system to Hexo.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  new       Create a new post.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  publish   Moves a draft post from _drafts to _posts folder.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render    Render files with renderer plugins.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  server    Start the server.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  version   Display version information.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Global Options:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --config  Specify config file instead of using _config.yml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --cwd     Specify the CWD&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --debug   Display all verbose messages in the terminal&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --draft   Display draft posts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --safe    Disable all plugins and scripts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --silent  Hide output on console&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;具体使用和解释&quot;&gt;&lt;a href=&quot;#具体使用和解释&quot; class=&quot;headerlink&quot; title=&quot;具体使用和解释&quot;&gt;&lt;/a&gt;具体使用和解释&lt;/h2&gt;
    
    </summary>
    
      <category term="博客" scheme="http://kaelblog.website/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://kaelblog.website/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>a++/++a 面试题</title>
    <link href="http://kaelblog.website/2017/05/10/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://kaelblog.website/2017/05/10/C语言基础面试题/</id>
    <published>2017-05-10T05:09:00.000Z</published>
    <updated>2017-08-04T02:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础面试题-a-a"><a href="#基础面试题-a-a" class="headerlink" title="基础面试题 (a++/++a)"></a>基础面试题 (a++/++a)</h1><ul>
<li>a++ / ++a 原理<blockquote>
<p>测试题目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int tmp = 0</div><div class="line">int a = 2;</div><div class="line">a = a++;</div><div class="line">tmp = a;</div><div class="line">b = a++ + ++a;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>请问 a/b/tmp 值分别为多少？</p>
<a id="more"></a>
<ul>
<li>答案: a = 4,b = 6,tmp = 2;<br>其实难点在于tmp的值的理解。<br>a = a++ ;运算过程是这样的:<br>1、a = 2;<br>2、copy a的值到新的内存空间，用于运算；a自身已经进行+1操作了。 即此时 a++ = 2, a = 3；<br>3、经过步骤2,a已经等于3了，但是却把a++（值为2）的值赋给a，所以a的值 由 3 变为 2；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础面试题-a-a&quot;&gt;&lt;a href=&quot;#基础面试题-a-a&quot; class=&quot;headerlink&quot; title=&quot;基础面试题 (a++/++a)&quot;&gt;&lt;/a&gt;基础面试题 (a++/++a)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;a++ / ++a 原理&lt;blockquote&gt;
&lt;p&gt;测试题目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int tmp = 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int a = 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = a++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmp = a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = a++ + ++a;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请问 a/b/tmp 值分别为多少？&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://kaelblog.website/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>初窥 CATransform3D  文档解读</title>
    <link href="http://kaelblog.website/2016/09/03/%E5%88%9D%E7%AA%A5_catransform3d_%C2%A0%E6%96%87%E6%A1%A3%E8%A7%A3%E8%AF%BB/"/>
    <id>http://kaelblog.website/2016/09/03/初窥_catransform3d_ 文档解读/</id>
    <published>2016-09-02T16:00:00.000Z</published>
    <updated>2017-05-17T09:13:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初窥-CATransform3D-文档解读"><a href="#初窥-CATransform3D-文档解读" class="headerlink" title="初窥 CATransform3D  文档解读"></a>初窥 CATransform3D  文档解读</h1><pre><code>struct CATransform3D   
{
CGFloat m11, m12, m13, m14;
CGFloat m21, m22, m23, m24;   
CGFloat m31, m32, m33, m34;   
CGFloat m41, m42, m43, m44;   
};   
</code></pre><hr>
<blockquote>
<p>{<br>CGFloat m11（x缩放）, m12（y切变）, m13（）, m14（）;<br>CGFloat m21（x切变）, m22（y缩放）, m23（）, m24（）;<br>CGFloat m31（）, m32（）, m33（）, m34（透视效果，要操作的这个对象要有旋转的角度，否则没有效果。当然,z方向上得有变化才会有透视效果）;<br>CGFloat m41（x平移）, m42（y平移）, m43（z平移）, m44（）;<br>};    </p>
<hr>
</blockquote>
<a id="more"></a>
<pre><code>typedef struct CATransform3D CATransform3D;
CA_EXTERN_C_BEGIN 
</code></pre><h2 id="CATransform3DIdentity"><a href="#CATransform3DIdentity" class="headerlink" title="CATransform3DIdentity"></a>CATransform3DIdentity</h2><ul>
<li><p><strong>The identity transform: [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1].</strong><br><strong>单位矩阵</strong></p>
<pre><code>CA_EXTERN const CATransform3D CATransform3DIdentity
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0); 
</code></pre></li>
</ul>
<h2 id="CATransform3DIsIdentity"><a href="#CATransform3DIsIdentity" class="headerlink" title="CATransform3DIsIdentity"></a>CATransform3DIsIdentity</h2><ul>
<li><p><strong>Returns true if ‘t’ is the identity transform.</strong><br><strong>返回布尔值 判断是否是单位矩阵</strong></p>
<pre><code>CA_EXTERN bool CATransform3DIsIdentity (CATransform3D t)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre></li>
</ul>
<h2 id="CATransform3DEqualToTransform"><a href="#CATransform3DEqualToTransform" class="headerlink" title="CATransform3DEqualToTransform"></a>CATransform3DEqualToTransform</h2><ul>
<li><p><strong>Returns true if ‘a’ is exactly equal to ‘b’.</strong><br><strong>返回布尔值 判断两个 CATransform3D 变量是否相等</strong></p>
<pre><code>CA_EXTERN bool CATransform3DEqualToTransform (CATransform3D a, 
CATransform3D b)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0); 
</code></pre></li>
</ul>
<h2 id="CATransform3DMakeTranslation"><a href="#CATransform3DMakeTranslation" class="headerlink" title="CATransform3DMakeTranslation"></a>CATransform3DMakeTranslation</h2><ul>
<li><p><strong>Returns a transform that translates by ‘(tx, ty, tz)’:</strong><br><strong>t’ =  [1 0 0 0; 0 1 0 0; 0 0 1 0; tx ty tz 1].</strong><br><strong>传入 (x,y,z) 向量，转换成 CATransform3D 变量</strong></p>
<pre><code>CA_EXTERN CATransform3D CATransform3DMakeTranslation (CGFloat tx,
CGFloat ty, CGFloat tz)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre></li>
</ul>
<h2 id="CATransform3DMakeScale"><a href="#CATransform3DMakeScale" class="headerlink" title="CATransform3DMakeScale"></a>CATransform3DMakeScale</h2><ul>
<li><strong>Returns a transform that scales by `(sx, sy, sz)’:</strong><br><strong>‘t’ = [sx 0 0 0; 0 sy 0 0; 0 0 sz 0; 0 0 0 1].</strong><br><strong>对 X,Y,Z 三个变量进行缩放，传入参数其实是个比率</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DMakeScale (CGFloat sx, CGFloat sy,
CGFloat sz)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0); 
</code></pre><h2 id="CATransform3DMakeRotation"><a href="#CATransform3DMakeRotation" class="headerlink" title="CATransform3DMakeRotation"></a>CATransform3DMakeRotation</h2><ul>
<li><strong>Returns a transform that rotates by ‘angle’ radians about the vector<br>‘(x, y, z)’. If the vector has length zero the identity transform is<br>returned.</strong><br><strong>在某个方向上旋转某个角度。返回一个 相对于某个矢量的旋转角度 的3D变换</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DMakeRotation (CGFloat angle, CGFloat x,
CGFloat y, CGFloat z)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DTranslate"><a href="#CATransform3DTranslate" class="headerlink" title="CATransform3DTranslate"></a>CATransform3DTranslate</h2><ul>
<li><strong>Translate ‘t’ by ‘(tx, ty, tz)’ and return the result:<br>‘t’ = translate(tx, ty, tz) * t.</strong><br><strong>在某个矢量基础上 进行另一个矢量运算。返回一个 相对于某个矢量的矢量运算的 的3D变换</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DTranslate (CATransform3D t, CGFloat tx,
CGFloat ty, CGFloat tz)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DScale"><a href="#CATransform3DScale" class="headerlink" title="CATransform3DScale"></a>CATransform3DScale</h2><ul>
<li><strong>Scale ‘t’ by ‘(sx, sy, sz)’ and return the result:</strong><br><strong>‘t’ = scale(sx, sy, sz) * t.</strong><br><strong>在某个矢量基础上 进行另一个矢量放缩。返回一个 相对于某个矢量的矢量放缩 的3D变换</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DScale (CATransform3D t, CGFloat sx,
CGFloat sy, CGFloat sz)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DRotate"><a href="#CATransform3DRotate" class="headerlink" title="CATransform3DRotate"></a>CATransform3DRotate</h2><ul>
<li><strong>Rotate ‘t’ by ‘angle’ radians about the vector ‘(x, y, z)’ and return<br>the result. If the vector has zero length the behavior is undefined:<br>‘t’ = rotation(angle, x, y, z) * t.</strong><br><strong>在某个矢量基础上 进行某个矢量方向上的旋转一定角度</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DRotate (CATransform3D t, CGFloat angle,
CGFloat x, CGFloat y, CGFloat z)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DConcat"><a href="#CATransform3DConcat" class="headerlink" title="CATransform3DConcat"></a>CATransform3DConcat</h2><ul>
<li><strong>Concatenate ‘b’ to ‘a’ and return the result: t’ = a * b.</strong><br>  <strong>把两个向量变换 combine 到一起。相当于是 两个向量进行向量运算。</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DConcat (CATransform3D a, CATransform3D b)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DInvert"><a href="#CATransform3DInvert" class="headerlink" title="CATransform3DInvert"></a>CATransform3DInvert</h2><ul>
<li><strong>Invert ‘t’ and return the result. Returns the original matrix if ‘t’<br>has no inverse.</strong><br>   <strong>返回一个逆向量</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DInvert (CATransform3D t)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DMakeAffineTransform"><a href="#CATransform3DMakeAffineTransform" class="headerlink" title="CATransform3DMakeAffineTransform"></a>CATransform3DMakeAffineTransform</h2><ul>
<li><strong>Return a transform with the same effect as affine transform ‘m’.</strong><br>  <strong>返回一个相同效果的向量 相当于 copy</strong></li>
</ul>
<pre><code>CA_EXTERN CATransform3D CATransform3DMakeAffineTransform (CGAffineTransform m)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DIsAffine"><a href="#CATransform3DIsAffine" class="headerlink" title="CATransform3DIsAffine"></a>CATransform3DIsAffine</h2><ul>
<li><strong>Returns true if ‘t’ can be represented exactly by an affine transform.</strong><br>  <strong>判断放射变换是否可以被精确表示</strong></li>
</ul>
<pre><code>CA_EXTERN bool CATransform3DIsAffine (CATransform3D t)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre><h2 id="CATransform3DGetAffineTransform"><a href="#CATransform3DGetAffineTransform" class="headerlink" title="CATransform3DGetAffineTransform"></a>CATransform3DGetAffineTransform</h2><ul>
<li><strong>Returns the affine transform represented by ‘t’. If ‘t’ can not be<br>represented exactly by an affine transform the returned value is<br>undefined.</strong><br>   <strong>返回以“T”为代表的 放射变换。如果不能进行放射变换 则 返回 未定义。</strong></li>
</ul>
<pre><code>CA_EXTERN CGAffineTransform CATransform3DGetAffineTransform (CATransform3D t)
__OSX_AVAILABLE_STARTING (__MAC_10_5, __IPHONE_2_0);
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初窥-CATransform3D-文档解读&quot;&gt;&lt;a href=&quot;#初窥-CATransform3D-文档解读&quot; class=&quot;headerlink&quot; title=&quot;初窥 CATransform3D  文档解读&quot;&gt;&lt;/a&gt;初窥 CATransform3D  文档解读&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;struct CATransform3D   
{
CGFloat m11, m12, m13, m14;
CGFloat m21, m22, m23, m24;   
CGFloat m31, m32, m33, m34;   
CGFloat m41, m42, m43, m44;   
};   
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;br&gt;CGFloat m11（x缩放）, m12（y切变）, m13（）, m14（）;&lt;br&gt;CGFloat m21（x切变）, m22（y缩放）, m23（）, m24（）;&lt;br&gt;CGFloat m31（）, m32（）, m33（）, m34（透视效果，要操作的这个对象要有旋转的角度，否则没有效果。当然,z方向上得有变化才会有透视效果）;&lt;br&gt;CGFloat m41（x平移）, m42（y平移）, m43（z平移）, m44（）;&lt;br&gt;};    &lt;/p&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
      <category term="Swift" scheme="http://kaelblog.website/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>初窥 CGAffineTransform 文档解读</title>
    <link href="http://kaelblog.website/2016/09/02/%E5%88%9D%E7%AA%A5_cgaffinetransform_%C2%A0%E6%96%87%E6%A1%A3%E8%A7%A3%E8%AF%BB/"/>
    <id>http://kaelblog.website/2016/09/02/初窥_cgaffinetransform_ 文档解读/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2017-05-17T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>初窥 CGAffineTransform  文档解读</p>
<ul>
<li><strong>序言</strong><br><strong>其实  <code>CGAffineTransform</code> 是一个结构体</strong>    <blockquote>
<p>struct CGAffineTransform {    </p>
<pre><code>CGFloat a, b, c, d;    
CGFloat tx, ty;    
</code></pre><p>};    </p>
</blockquote>
</li>
</ul>
<p>博主小手一抖，</p>
<a id="more"></a>
<p>初始化成这样：’CGAffineTransform *transform = CGAffineTransformIdentity;’这样Xcode是会报错的，然后查验方法却总是找不到错误，自已一查，妹的！竟然是初始化的时候数据类型有错误。）</p>
<hr>
<p><strong>下面步入正题</strong>    </p>
<hr>
<h1 id="CGAffineTransform"><a href="#CGAffineTransform" class="headerlink" title="CGAffineTransform"></a>CGAffineTransform</h1><ul>
<li><strong>The identity transform: [ 1 0 0 1 0 0 ].</strong>     </li>
<li><p><strong>返回单位矩阵</strong></p>
<pre><code>CG_EXTERN const CGAffineTransform CGAffineTransformIdentity
CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformMake"><a href="#CGAffineTransformMake" class="headerlink" title="CGAffineTransformMake"></a>CGAffineTransformMake</h1><ul>
<li><strong>Return the transform [ a b c d tx ty ].</strong>     </li>
<li><p><strong>返回矩阵</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformMake(CGFloat a, CGFloat b,
CGFloat c, CGFloat d, CGFloat tx, CGFloat ty)
CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
</code></pre></li>
</ul>
<h1 id="CGAffineTransformMakeTranslation"><a href="#CGAffineTransformMakeTranslation" class="headerlink" title="CGAffineTransformMakeTranslation"></a>CGAffineTransformMakeTranslation</h1><ul>
<li><strong>Return a transform which translates by ‘(tx, ty)’:</strong><br> <strong>t = [ 1 0 0 1 tx ty ].</strong> </li>
<li><p><strong>直接将数值转换成仿射变换</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformMakeTranslation(CGFloat tx,
CGFloat ty) CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
</code></pre></li>
</ul>
<h1 id="CGAffineTransformMakeScale"><a href="#CGAffineTransformMakeScale" class="headerlink" title="CGAffineTransformMakeScale"></a>CGAffineTransformMakeScale</h1><ul>
<li><strong>Return a transform which scales by ‘(sx, sy)’:<br>   t = [ sx 0 0 sy 0 0 ].</strong>     </li>
<li><p><strong>仿射变换的放缩效果</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformMakeScale(CGFloat sx, CGFloat sy)
CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformMakeRotation"><a href="#CGAffineTransformMakeRotation" class="headerlink" title="CGAffineTransformMakeRotation"></a>CGAffineTransformMakeRotation</h1><ul>
<li><strong>Return a transform which rotates by ‘angle’ radians:<br>   t = [ cos(angle) sin(angle) -sin(angle) cos(angle) 0 0 ].</strong> </li>
<li><p><strong>仿射变换的旋转效果</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformMakeRotation(CGFloat angle)
CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformIsIdentity"><a href="#CGAffineTransformIsIdentity" class="headerlink" title="CGAffineTransformIsIdentity"></a>CGAffineTransformIsIdentity</h1><ul>
<li><strong>Return true if ‘t’ is the identity transform, false otherwise.</strong>    </li>
<li><p><strong>判断是否是单位矩阵</strong></p>
<pre><code>CG_EXTERN bool CGAffineTransformIsIdentity(CGAffineTransform t)
CG_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_2_0);
</code></pre></li>
</ul>
<h1 id="CGAffineTransformTranslate"><a href="#CGAffineTransformTranslate" class="headerlink" title="CGAffineTransformTranslate"></a>CGAffineTransformTranslate</h1><ul>
<li><strong>Translate ‘t’ by ‘(tx, ty)’ and return the result:<br>   t = [ 1 0 0 1 tx ty ] * t .</strong></li>
<li><p><strong>仿射变换的 矢量运算效果 （动画叠加效果）得到一个矢量</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformTranslate(CGAffineTransform t,
CGFloat tx, CGFloat ty) CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformScale"><a href="#CGAffineTransformScale" class="headerlink" title="CGAffineTransformScale"></a>CGAffineTransformScale</h1><ul>
<li><strong>Scale ‘t’ by ‘(sx, sy)’ and return the result:<br>   t’ = [ sx 0 0 sy 0 0 ] * t .</strong></li>
<li><p><strong>仿射变换的 矢量运算的 得到一个放缩变换的矢量</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformScale(CGAffineTransform t,
CGFloat sx, CGFloat sy) CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformRotate"><a href="#CGAffineTransformRotate" class="headerlink" title="CGAffineTransformRotate"></a>CGAffineTransformRotate</h1><ul>
<li><strong>Rotate ‘t’  by  ‘angle’ radians and return the result:<br>t =  [ cos(angle) sin(angle) -sin(angle) cos(angle) 0 0 ] * t .</strong></li>
<li><p><strong>矢量运算后的 放缩变换的矢量</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformRotate(CGAffineTransform t,
CGFloat angle) CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformInvert"><a href="#CGAffineTransformInvert" class="headerlink" title="CGAffineTransformInvert"></a>CGAffineTransformInvert</h1><ul>
<li><strong>Invert ‘t’ and return the result. If ‘t’ has zero determinant, then ‘t’<br> is returned unchanged.</strong>    </li>
<li><p><strong>得到一个逆矩阵</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformInvert(CGAffineTransform t)
CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformConcat"><a href="#CGAffineTransformConcat" class="headerlink" title="CGAffineTransformConcat"></a>CGAffineTransformConcat</h1><ul>
<li><strong>Concatenate ‘t2’ to ‘t1’ and return the result:<br>   t = t1 * t2.</strong></li>
<li><p><strong>合并矢量</strong></p>
<pre><code>CG_EXTERN CGAffineTransform CGAffineTransformConcat(CGAffineTransform t1,
CGAffineTransform t2) CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGAffineTransformEqualToTransform"><a href="#CGAffineTransformEqualToTransform" class="headerlink" title="CGAffineTransformEqualToTransform"></a>CGAffineTransformEqualToTransform</h1><ul>
<li><p><strong>Return true if ‘t1’ and ‘t2’ are equal, false otherwise.</strong><br><strong>判断俩仿射变换是否相等</strong></p>
<pre><code>CG_EXTERN bool CGAffineTransformEqualToTransform(CGAffineTransform t1,
CGAffineTransform t2) CG_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_2_0);    
</code></pre></li>
</ul>
<h1 id="CGPointApplyAffineTransform"><a href="#CGPointApplyAffineTransform" class="headerlink" title="CGPointApplyAffineTransform"></a>CGPointApplyAffineTransform</h1><ul>
<li><p><strong>Transform ‘point’ by ‘t’ and return the result:<br>   p = p * t.<br> where: p = [ x y 1 ].</strong></p>
<pre><code>CG_EXTERN CGPoint CGPointApplyAffineTransform(CGPoint point,
CGAffineTransform t) CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
</code></pre></li>
</ul>
<h1 id="CGSizeApplyAffineTransform"><a href="#CGSizeApplyAffineTransform" class="headerlink" title="CGSizeApplyAffineTransform"></a>CGSizeApplyAffineTransform</h1><ul>
<li><p><strong>Transform ‘size’ by ‘t’ and return the result:<br>s = s * t.<br>where s = [ width height 0 ].</strong></p>
<pre><code>CG_EXTERN CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t)
CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
</code></pre></li>
</ul>
<h1 id="CGRectApplyAffineTransform"><a href="#CGRectApplyAffineTransform" class="headerlink" title="CGRectApplyAffineTransform"></a>CGRectApplyAffineTransform</h1><ul>
<li><p><strong>Transform ‘rect’ by ‘t’ and return the result. Since affine transforms do<br> not preserve rectangles in general, this function returns the smallest<br> rectangle which contains the transformed corner points of ‘rect’. If ‘t’<br> consists solely of scales, flips and translations, then the returned<br> rectangle coincides with the rectangle constructed from the four<br> transformed corners.</strong> </p>
<pre><code>CG_EXTERN CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform t)
CG_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_2_0);
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初窥 CGAffineTransform  文档解读&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序言&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;其实  &lt;code&gt;CGAffineTransform&lt;/code&gt; 是一个结构体&lt;/strong&gt;    &lt;blockquote&gt;
&lt;p&gt;struct CGAffineTransform {    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CGFloat a, b, c, d;    
CGFloat tx, ty;    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;};    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;博主小手一抖，&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
      <category term="Swift" scheme="http://kaelblog.website/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>播放器横竖屏 屏幕旋转问题</title>
    <link href="http://kaelblog.website/2016/07/27/%E6%92%AD%E6%94%BE%E5%99%A8%E6%A8%AA%E7%AB%96%E5%B1%8F_%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E9%97%AE%E9%A2%98/"/>
    <id>http://kaelblog.website/2016/07/27/播放器横竖屏_屏幕旋转问题/</id>
    <published>2016-07-27T11:55:04.000Z</published>
    <updated>2017-05-17T09:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>#播放器横竖屏 屏幕旋转问题</p>
<ul>
<li><p>#问题：<br>现在又界面节目List界面A，和播放器界面B.<br>A界面只支持竖屏，B界面只支持横屏。<br>由A界面跳转到B界面，返回到A界面的时候，屏幕会闪一下（iOS 9比较明显，iOS8看不出来，模拟器iOS9会更明显）。同时，A界面POP到上一个界面的时候，也会闪一下，并且，侧滑返回手势失效！！</p>
<!-- 查看详情 -->
<a id="more"></a>
</li>
<li><p>#原因分析：<br>横屏跳转到竖屏，没有一个中间过渡 动画没法执行，所以看起来会闪一下。</p>
</li>
<li><p>#问题解决：   </p>
</li>
</ul>
<p>1、两个界面中间加一个过度界面 bufferPage 。BufferPage 支持所有方向。<br>A -&gt; bufferPage -&gt; B<br>或者<br>B -&gt; bufferPage -&gt; A<br>这两种跳转中间都有一个过度界面作为动画的缓冲区，这样Navigation的堆栈上对于屏幕支持上也不会混乱。</p>
<p>2、只处理B界面。把bufferPage融入到B界面。<br>进入到B界面起初，可以让B界面先是支持所有方向，并允许旋转。然后，旋转屏幕到横屏，这时只让B支持横屏不支持竖屏。<br>从B界面返回只支持竖屏的A界面之前，先让屏幕支持所有方向，并旋转屏幕到竖屏，立即POP返回A界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#播放器横竖屏 屏幕旋转问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;#问题：&lt;br&gt;现在又界面节目List界面A，和播放器界面B.&lt;br&gt;A界面只支持竖屏，B界面只支持横屏。&lt;br&gt;由A界面跳转到B界面，返回到A界面的时候，屏幕会闪一下（iOS 9比较明显，iOS8看不出来，模拟器iOS9会更明显）。同时，A界面POP到上一个界面的时候，也会闪一下，并且，侧滑返回手势失效！！&lt;/p&gt;
&lt;!-- 查看详情 --&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
      <category term="Swift" scheme="http://kaelblog.website/tags/Swift/"/>
    
      <category term="Player" scheme="http://kaelblog.website/tags/Player/"/>
    
  </entry>
  
  <entry>
    <title>UIButton 点击事件响应延迟 问题解决</title>
    <link href="http://kaelblog.website/2016/07/22/UIButton%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://kaelblog.website/2016/07/22/UIButton点击事件响应延迟问题解决/</id>
    <published>2016-07-22T11:55:04.000Z</published>
    <updated>2017-05-17T09:12:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIButton 点击事件响应延迟 问题解决</p>
<ul>
<li>问题表现<blockquote>
<p>我在UITableView的Header上添加了一个视图（FiltersView），FiltersView上面添加了不定数量的 UIButton。点击UIButton 字体颜色和 layer 的 border 颜色发生改变。但是，当我快速点击快速抬起的时候，发现按钮颜色和border的颜色并没有发生改变；只有在手指停留在屏幕上的时间稍长一点的时候才会有响应事件触发。</p>
<a id="more"></a>
</blockquote>
</li>
</ul>
<ul>
<li>点击之前的效果</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160707095553696" alt="这是点击前的效果"></p>
<ul>
<li>点击之后应该有的效果<br><img src="http://img.blog.csdn.net/20160707095714119" alt="点击之后应该有的效果"></li>
</ul>
<ul>
<li>问题分析<br>响应事件延迟有两种情况：</li>
</ul>
<ol>
<li><p>UIButton 的event事件调用错误   </p>
<pre><code>在这个网友的日志里看到一些内容，大体如下：
</code></pre><p>UIControlEventTouchDown<br>单点触摸按下事件：用户点触屏幕，或者又有新手指落下的时候。<br>UIControlEventTouchDownRepeat<br>多点触摸按下事件，点触计数大于1：用户按下第二、三、或第四根手指的时候。<br>UIControlEventTouchDragInside<br>当一次触摸在控件窗口内拖动时。<br>UIControlEventTouchDragOutside<br>当一次触摸在控件窗口之外拖动时。<br>UIControlEventTouchDragEnter<br>当一次触摸从控件窗口之外拖动到内部时。<br>UIControlEventTouchDragExit<br>当一次触摸从控件窗口内部拖动到外部时。  </p>
</li>
</ol>
<hr>
<p>UIControlEventTouchUpInside<br>所有在控件之内触摸抬起事件。<br>UIControlEventTouchUpOutside<br>所有在控件之外触摸抬起事件(点触必须开始与控件内部才会发送通知)。<br>UIControlEventTouchCancel<br>所有触摸取消事件，即一次触摸因为放上了太多手指而被取消，或者被上锁或者电话呼叫打断。<br>UIControlEventTouchChanged<br>当控件的值发生改变时，发送通知。用于滑块、分段控件、以及其他取值的控件。你可以配置滑块控件何时发送通知，在滑块被放下时发送，或者在被拖动时发送。<br>UIControlEventEditingDidBegin<br>当文本控件中开始编辑时发送通知。<br>UIControlEventEditingChanged<br>当文本控件中的文本被改变时发送通知。<br>UIControlEventEditingDidEnd<br>当文本控件中编辑结束时发送通知。<br>UIControlEventEditingDidOnExit<br>当文本控件内通过按下回车键（或等价行为）结束编辑时，发送通知。<br>UIControlEventAlltouchEvents<br>通知所有触摸事件。<br>UIControlEventAllEditingEvents<br>通知所有关于文本编辑的事件。<br>UIControlEventAllEvents<br>通知所有事件。</p>
<ol>
<li>父试图拦截了触摸事件 （手势冲突，或者交互的别的什么原因）<br>经过多方查证，可能造成父试图拦截的情况分别是 UIScrollVIew 和UITableView。系统默认<strong><em>delaysTouchesBegan</em></strong> 属性为YES, 设置 <strong><em>delaysTouchesBegan</em></strong> 属性 为NO即可解决延时响应问题。</li>
</ol>
<p><strong>原因</strong>：iOS 7+系统 ，手触摸到屏幕后系统会有 150ms的时间去反应并判断，你是否是正常点击和不经意间的点击。手触摸屏幕时间超过 150ms UIScrollView 或者UITableView  才会把触摸事件分发给各个子视图。否则，会被其拦截。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIButton 点击事件响应延迟 问题解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题表现&lt;blockquote&gt;
&lt;p&gt;我在UITableView的Header上添加了一个视图（FiltersView），FiltersView上面添加了不定数量的 UIButton。点击UIButton 字体颜色和 layer 的 border 颜色发生改变。但是，当我快速点击快速抬起的时候，发现按钮颜色和border的颜色并没有发生改变；只有在手指停留在屏幕上的时间稍长一点的时候才会有响应事件触发。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaelblog.website/categories/programming/"/>
    
    
      <category term="OC" scheme="http://kaelblog.website/tags/OC/"/>
    
      <category term="UIButton" scheme="http://kaelblog.website/tags/UIButton/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kaelblog.website/2016/07/22/hello-world/"/>
    <id>http://kaelblog.website/2016/07/22/hello-world/</id>
    <published>2016-07-22T11:48:52.000Z</published>
    <updated>2016-07-23T02:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
